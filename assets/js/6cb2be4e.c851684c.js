"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[7668],{94192:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>y,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>s});var r=n(42922),i=n(74848),c=n(28453);const a={slug:"product-security-testing-problems",title:"\u7b2c\u4e09\u65b9\u6d4b\u8bd5-\u7cfb\u7edf\u5b89\u5168\u6d4b\u8bd5\u95ee\u9898\u4e4b\u6570\u636e\u52a0\u5bc6",authors:["jiguanchen"],tags:["\u5b89\u5168"]},y="\u7b2c\u4e09\u65b9\u6d4b\u8bd5-\u7cfb\u7edf\u5b89\u5168\u6d4b\u8bd5\u95ee\u9898",p={authorsImageUrls:[void 0]},s=[{value:"<strong>\u5b89\u5168\u67b6\u67845A\u65b9\u6cd5\u8bba</strong>",id:"\u5b89\u5168\u67b6\u67845a\u65b9\u6cd5\u8bba",level:2},{value:"<strong>\u5173\u4e8e\u6570\u636e\u5b89\u5168\u65b9\u9762</strong>",id:"\u5173\u4e8e\u6570\u636e\u5b89\u5168\u65b9\u9762",level:2}];function l(t){const e={code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:"\u73b0\u5728\u56fd\u5185\u8d8a\u6765\u8d8a\u91cd\u89c6\u7cfb\u7edf\u5b89\u5168\uff0c\u6700\u8fd1\u6211\u4eec\u516c\u53f8\u5728\u505a\u7b2c\u4e09\u65b9\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\u5bf9\u7cfb\u7edf\u5b89\u5168\u3001\u7cfb\u7edf\u6027\u80fd\u7b49\u505a\u51fa\u4e86\u4e25\u683c\u7684\u8981\u6c42\uff0c\u5e76\u8fdb\u884c\u4e86\u5f88\u5927\u7684\u6574\u6539\uff0c\u5c31\u4ece\u8fd9\u7bc7\u6587\u7ae0\u5f00\u59cb\u603b\u7ed3\u4e00\u4e0b\u6700\u8fd1\u4e09\u4e2a\u6708\u4ee5\u53ca\u4ee5\u540e\u8fd8\u4f1a\u7ee7\u7eed\u6574\u6539\u7684\u6d89\u53ca\u7cfb\u7edf\u5b89\u5168\u7684\u76f8\u5173\u6d4b\u8bd5\u6f0f\u6d1e\u7684\u4fee\u6539\u65b9\u6848\uff0c\u76f8\u4fe1\u8fd9\u4e9b\u95ee\u9898\u4f1a\u5e2e\u52a9\u5230\u5927\u5bb6\uff0c\u5c24\u5176\u662f\u6bd4\u8f83\u5927\u578b\u7684\u653f\u5e9c\u9879\u76ee\uff0c\u5bf9\u7cfb\u7edf\u5b89\u5168\u66f4\u52a0\u6ce8\u91cd\u3002"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.em,{children:"\u5728\u4e92\u8054\u7f51\u548c\u65b0\u5174\u6280\u672f\u9ad8\u901f\u53d1\u5c55\u7684\u4eca\u5929\uff0c\u6570\u636e\u4fe1\u606f\u5145\u65a5\u5728\u5404\u884c\u5404\u4e1a\u4e2d\uff0c\u5e76\u53d1\u6325\u7740\u91cd\u8981\u7684\u4f5c\u7528\u3002\u7136\u800c\uff0c\u5728\u4eab\u53d7\u4fe1\u606f\u5316\u65f6\u4ee3\u5e26\u6765\u4fbf\u5229\u7684\u540c\u65f6\uff0c\u6570\u636e\u5b89\u5168\u95ee\u9898\u4e5f\u6210\u4e3a\u5927\u5bb6\u5173\u6ce8\u7684\u7126\u70b9\u3002\u65e0\u8bba\u662f\u4ecetoG\u3001toB\u3001toC\u7684\u5404\u4e1a\u52a1\u573a\u666f\u6765\u770b\uff0c\u8fd8\u662f\u4ece\u7f51\u7edc\u5b89\u5168\uff08CyberSecurity\uff09\u7684\u67b6\u6784\u6765\u770b\uff0c\u6570\u636e\u5b89\u5168\uff08DataSecurity\uff09\u90fd\u662f\u4e00\u4e2a\u4e3b\u8981\u7684\u7ec4\u6210\u90e8\u5206\uff0c\u800c\u4e14\u5728\u65b0\u5174\u6280\u672f\u65e5\u65b0\u6708\u5f02\u7684\u6570\u636e\u65f6\u4ee3\u53d8\u5f97\u8d8a\u6765\u8d8a\u91cd\u8981\uff0c\u8303\u56f4\u4e5f\u8d8a\u6765\u8d8a\u5927\u3002"}),"\n------- ",(0,i.jsx)(e.em,{children:"\u5f15\u81ea \u300a\u6570\u636e\u5b89\u5168\u67b6\u6784\u8bbe\u8ba1\u4e0e\u5b9e\u6218\u300b"})]}),"\n",(0,i.jsx)(e.h2,{id:"\u5b89\u5168\u67b6\u67845a\u65b9\u6cd5\u8bba",children:(0,i.jsx)(e.strong,{children:"\u5b89\u5168\u67b6\u67845A\u65b9\u6cd5\u8bba"})}),"\n",(0,i.jsx)(e.p,{children:"\u65e0\u8bba\u662f\u8fdb\u884c\u4ea7\u54c1\u7684\u5b89\u5168\u67b6\u6784\u8bbe\u8ba1\u6216\u8bc4\u4f30\uff0c\u8fd8\u662f\u89c4\u5212\u5b89\u5168\u6280\u672f\u4f53\u7cfb\u67b6\u6784\u7684\u65f6\u5019\uff0c\u90fd\u6709\u51e0\u4e2a\u9700\u8981\u91cd\u70b9\u5173\u6ce8\u7684\u903b\u8f91\u6a21\u5757\uff0c\u5b83\u4eec\u53ef\u4ee5\u5728\u903b\u8f91\u4e0a\u89c6\u4e3a\u5b89\u5168\u67b6\u6784\u7684\u6838\u5fc3\u5143\u7d20\u3002\n\u4ee5\u5e94\u7528/\u4ea7\u54c1\u4e3a\u4f8b\uff0c\u6838\u5fc3\u5143\u7d20\u5305\u62ec\uff1a\n\u25a0 \u8eab\u4efd\u8ba4\u8bc1\uff08Authentication\uff09\uff1a\u7528\u6237\u4e3b\u4f53\u662f\u8c01\uff1f\n\u25a0 \u6388\u6743\uff08Authorization\uff09\uff1a\u6388\u4e88\u67d0\u4e9b\u7528\u6237\u4e3b\u4f53\u5141\u8bb8\u6216\u62d2\u7edd\u8bbf\u95ee\u5ba2\u4f53\u7684\u6743\u9650\u3002\n\u25a0 \u8bbf\u95ee\u63a7\u5236\uff08Access Control\uff09\uff1a\u63a7\u5236\u63aa\u65bd\u4ee5\u53ca\u662f\u5426\u653e\u884c\u7684\u6267\u884c\u8005\u3002\n\u25a0 \u53ef\u5ba1\u8ba1\uff08Auditable\uff09\uff1a\u5f62\u6210\u53ef\u4f9b\u8ffd\u6eaf\u7684\u64cd\u4f5c\u65e5\u5fd7\u3002\n\u25a0 \u8d44\u4ea7\u4fdd\u62a4\uff08Asset Protection\uff09\uff1a\u8d44\u4ea7\u7684\u4fdd\u5bc6\u6027\u3001\u5b8c\u6574\u6027\u3001\u53ef\u7528\u6027\u4fdd\u969c"}),"\n",(0,i.jsx)(e.h2,{id:"\u5173\u4e8e\u6570\u636e\u5b89\u5168\u65b9\u9762",children:(0,i.jsx)(e.strong,{children:"\u5173\u4e8e\u6570\u636e\u5b89\u5168\u65b9\u9762"})}),"\n",(0,i.jsx)(e.p,{children:"\u6211\u4eec\u5728\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\u6d89\u53ca\u5230\u4e86\u5bf9\u6570\u636e\u4f20\u8f93\u52a0\u5bc6\u3001\u6570\u636e\u5b58\u50a8\u52a0\u5bc6\u3001\u5bf9\u79f0\u52a0\u5bc6\u3001\u975e\u5bf9\u79f0\u52a0\u5bc6\u3001SM2\u3001SM3\u3001SM4\u56fd\u5bc6\u52a0\u5bc6\uff0cCA\u8bc1\u4e66\u7b49\u7b49"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:(0,i.jsx)(e.strong,{children:"\u4ec0\u4e48\u662f\u975e\u5bf9\u79f0\u52a0\u5bc6\u5462\uff1f"})})}),"\n",(0,i.jsx)(e.p,{children:"\u975e\u5bf9\u79f0\u52a0\u5bc6\u662f\u4e00\u79cd\u5bc6\u7801\u5b66\u6280\u672f\uff0c\u4e0e\u4f20\u7edf\u7684\u5bf9\u79f0\u52a0\u5bc6\u4e0d\u540c\uff0c\u5b83\u4f7f\u7528\u4e00\u5bf9\u5bc6\u94a5\u6765\u8fdb\u884c\u52a0\u5bc6\u548c\u89e3\u5bc6\u64cd\u4f5c\uff0c\u8fd9\u5bf9\u5bc6\u94a5\u5206\u522b\u79f0\u4e3a\u516c\u94a5\u548c\u79c1\u94a5\u3002\u8fd9\u4e24\u4e2a\u5bc6\u94a5\u662f\u6570\u5b66\u4e0a\u76f8\u5173\u8054\u7684\uff0c\u4f46\u5374\u4e0d\u80fd\u901a\u8fc7\u5df2\u77e5\u4e00\u4e2a\u5bc6\u94a5\u6765\u8f7b\u677e\u5730\u63a8\u5bfc\u51fa\u53e6\u4e00\u4e2a\u5bc6\u94a5\u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u6211\u4eec\u53ef\u4ee5\u60f3\u8c61\u4e00\u4e0b\uff0c\u5c31\u50cf\u4f60\u6709\u4e00\u628a\u9501\u548c\u4e00\u628a\u94a5\u5319\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u5f97\u5230\u8fd9\u628a\u9501\uff0c\u4f46\u53ea\u6709\u4f60\u6709\u8fd9\u628a\u552f\u4e00\u7684\u94a5\u5319\u3002\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u628a\u9501\u5c06\u4fe1\u606f\u9501\u4f4f\uff0c\u4f46\u53ea\u6709\u4f60\u80fd\u591f\u4f7f\u7528\u4f60\u7684\u72ec\u7279\u7684\u94a5\u5319\u6765\u89e3\u9501\u8fd9\u4e2a\u4fe1\u606f\u3002"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"\u516c\u94a5\uff1a \u5c31\u50cf\u662f\u4e00\u4e2a\u5f00\u653e\u7684\u9501\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u83b7\u5f97\u3002\u5b83\u7528\u4e8e\u52a0\u5bc6\u4fe1\u606f\uff0c\u53ea\u6709\u62e5\u6709\u4e0e\u4e4b\u76f8\u5173\u7684\u79c1\u94a5\u7684\u4eba\u624d\u80fd\u89e3\u5bc6\u3002"}),"\n",(0,i.jsx)(e.li,{children:"\u79c1\u94a5\uff1a \u8fd9\u662f\u4e0e\u516c\u94a5\u76f8\u5173\u8054\u7684\u552f\u4e00\u7684\u89e3\u9501\u5bc6\u94a5\uff0c\u53ea\u6709\u5bc6\u94a5\u7684\u62e5\u6709\u8005\u624d\u80fd\u89e3\u5bc6\u7528\u516c\u94a5\u52a0\u5bc6\u7684\u4fe1\u606f\u3002"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"\u4e3e\u4f8b\u6765\u8bf4\uff0c\u8003\u8651\u7528\u6237\u5bc6\u7801\u7684\u5b58\u50a8\u95ee\u9898\u3002\u901a\u8fc7\u975e\u5bf9\u79f0\u52a0\u5bc6\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u5c06\u7528\u6237\u5bc6\u7801\u52a0\u5bc6\u540e\u5199\u5165\u6570\u636e\u5e93\u3002\u5f53\u7528\u6237\u518d\u6b21\u767b\u5f55\u65f6\uff0c\u7cfb\u7edf\u5c06\u5ba2\u6237\u7aef\u8f93\u5165\u7684\u660e\u6587\u5bc6\u7801\u4f7f\u7528\u76f8\u540c\u7684\u975e\u5bf9\u79f0\u52a0\u5bc6\u65b9\u5f0f\u52a0\u5bc6\uff0c\u7136\u540e\u4e0e\u6570\u636e\u5e93\u4e2d\u7684\u5bc6\u6587\u8fdb\u884c\u6bd4\u5bf9\u3002\u8fd9\u6837\u7684\u8bbe\u8ba1\u5927\u5927\u63d0\u9ad8\u4e86\u5b89\u5168\u6027\uff0c\u5373\u4f7f\u6570\u636e\u5e93\u88ab\u653b\u51fb\uff0c\u653b\u51fb\u8005\u4e5f\u65e0\u6cd5\u8f7b\u677e\u83b7\u53d6\u7528\u6237\u7684\u660e\u6587\u5bc6\u7801\u3002\n\u56fd\u5bc6SM2\u52a0\u5bc6\u65b9\u5f0f\u5c31\u662f\u975e\u5bf9\u79f0\u52a0\u5bc6\u7684\u3002\u4e0b\u9762\u662f\u56fd\u5bc6SM2\u52a0\u5bc6\u5de5\u5177\u7684\u6e90\u7801\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'/*\u692d\u5706\u66f2\u7ebf\u975e\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5*/\npublic class SM2Util {\n\n    public static final String key_pubk= "pub";\n    public static final String key_prik= "pri";\n\n    private static SM2 sm2 = SM2.instance();\n\n\tprivate static final String DEFAULT_PRIVATE_KEY = "27cd96b1500f8330fc523e7c47ef02a";\n\tprivate static final String DEFAULT_PUBLIC_KEY = "047ec86bb18f57714e6c5c72383c5b122";\n\n\t/**\n\t * \u751f\u6210\u516c\u79c1\u94a5\n\t * @return\n\t */\n    public static Map<String,String> generateKeyPair() {\n        Map<String,String> result = new HashMap<>();\n        AsymmetricCipherKeyPair key = sm2.eccKeyPairGenerator.generateKeyPair();\n\n        BigInteger privateKey = ((ECPrivateKeyParameters)key.getPrivate()).getD();\n        ECPoint publicKey = ((ECPublicKeyParameters)key.getPublic()).getQ();\n\n        String pubk = new String(Hex.encode(publicKey.getEncoded(false)), StandardCharsets.UTF_8);\n        String prik = new String(Hex.encode(privateKey.toByteArray()), StandardCharsets.UTF_8);\n\n\n        result.put(key_pubk, pubk);\n        result.put(key_prik, prik);\n\n        return result;\n    }\n\n    /**\n     * \u83b7\u53d6\u9ed8\u8ba4\u516c\u94a5\n     * @return\n     */\n    public static String getDefaultPublicKey() {\n    \treturn DEFAULT_PUBLIC_KEY;\n    }\n\n    /**\n     * \u83b7\u53d6\u9ed8\u8ba4\u79c1\u94a5\n     * @return\n     */\n    public static String getDefaultPrivateKey() {\n    \treturn DEFAULT_PRIVATE_KEY;\n    }\n\n    /**\n     * \u52a0\u5bc6\n     * @param data\n     * @param publicKey\n     * @return\n     */\n    protected static byte[] encrypt(String data, byte[] publicKey) {\n    \tif (StringUtils.isBlank(data)) {\n    \t\treturn null;\n    \t}\n\n\n    \tSM2Cipher cipher = new SM2Cipher();\n\n    \t// C1\n    \tbyte[] c1Bytes = new byte[65];\n    \tECPoint c1 = cipher.encryptInit(sm2, sm2.eccCurve.decodePoint(publicKey));\n    \tc1Bytes = c1.getEncoded(false);\n\n        // C2\n        byte[] c2Bytes = data.getBytes(StandardCharsets.UTF_8);\n        cipher.encrypt(c2Bytes);\n\n        // C3\n        byte[] c3Bytes = new byte[32];\n        cipher.doFinal(c3Bytes);\n\n        byte[] encryptData = new byte[c1Bytes.length + c2Bytes.length + c3Bytes.length];\n\t\tSystem.arraycopy(c1Bytes, 0, encryptData, 0, c1Bytes.length);\n\t\tSystem.arraycopy(c2Bytes, 0, encryptData, c1Bytes.length, c2Bytes.length);\n\t\tSystem.arraycopy(c3Bytes, 0, encryptData, c1Bytes.length + c2Bytes.length, c3Bytes.length);\n\n        return encryptData;\n    }\n\n    /**\n     * \u52a0\u5bc6\n     * @param data\n     * @param publicKey\n     * @return\n     */\n    public static byte[] encrypt(String data, String publicKey) {\n    \treturn encrypt(data, HexUtil.hexToByte(publicKey));\n    }\n\n    /**\n     * \u52a0\u5bc6\n     * @param data\n     * @param publicKey\n     * @return\n     */\n    public static byte[] encrypt(byte[] data, String publicKey) {\n    \treturn encrypt(new String(data, StandardCharsets.UTF_8), HexUtil.hexToByte(publicKey));\n    }\n\n    /**\n     * \u52a0\u5bc6\n     * @param data\n     * @param publicKey\n     * @return\n     */\n    public static String encryptToHexString(String data, String publicKey) {\n    \treturn HexUtil.byteToHex(encrypt(data, HexUtil.hexToByte(publicKey)));\n    }\n\n    /**\n     * \u52a0\u5bc6\n     * @param data\n     * @param publicKey\n     * @return\n     */\n    public static String encryptToHexString(byte[] data, String publicKey) {\n    \treturn HexUtil.byteToHex(encrypt(new String(data, StandardCharsets.UTF_8), HexUtil.hexToByte(publicKey)));\n    }\n\n    /**\n     * \u89e3\u5bc6\n     * @param encryptedData\n     * @param privateKey\n     * @return\n     */\n    protected static byte[] decrypt(byte[] encryptedData, byte[] privateKey) {\n    \tif (ArrayUtils.isEmpty(encryptedData)) {\n    \t\treturn null;\n    \t}\n\n\n    \tSM2Cipher cipher = new SM2Cipher();\n\n        // C1\n        byte[] c1Bytes = new byte[65];\n        System.arraycopy(encryptedData, 0, c1Bytes, 0, c1Bytes.length);\n        ECPoint c1 = sm2.eccCurve.decodePoint(c1Bytes).normalize();\n\n        // C3\n        byte[] c3Bytes = new byte[32];\n        System.arraycopy(encryptedData, encryptedData.length - 32, c3Bytes, 0, 32);\n\n        // C2\n        int c2Len = encryptedData.length - 65 - 32;\n        byte[] c2Bytes = new byte[c2Len];\n        System.arraycopy(encryptedData, 65, c2Bytes, 0, c2Len);\n\n        cipher.decryptInit(new BigInteger(1, privateKey), c1);\n        cipher.decrypt(c2Bytes);\n        cipher.doFinal(c3Bytes);\n        return c2Bytes;\n    }\n\n    /**\n     * \u89e3\u5bc6\n     * @param encryptedData\n     * @param privateKey\n     * @return\n     */\n    public static byte[] decrypt(byte[] encryptedData, String privateKey) {\n    \treturn decrypt(encryptedData, HexUtil.hexToByte(privateKey));\n    }\n\n    /**\n     * \u89e3\u5bc6\n     * @param encryptedData\n     * @param privateKey\n     * @return\n     */\n    public static String decryptToString(byte[] encryptedData, String privateKey) {\n    \treturn new String(decrypt(encryptedData, HexUtil.hexToByte(privateKey)), StandardCharsets.UTF_8);\n    }\n\n    /**\n     * \u89e3\u5bc6\n     * @param encryptedData\n     * @param privateKey\n     * @return\n     */\n    public static String decryptToString(String encryptedData, String privateKey) {\n    \treturn new String(decrypt(Hex.decode(encryptedData), HexUtil.hexToByte(privateKey)), StandardCharsets.UTF_8);\n    }\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"\u6b64\u5916\uff0cCA\uff08Certificate Authority\uff0c\u8bc1\u4e66\u9881\u53d1\u673a\u6784\uff09\u673a\u6784\u901a\u5e38\u4e5f\u4f7f\u7528\u975e\u5bf9\u79f0\u52a0\u5bc6\u7684\u65b9\u5f0f\u6765\u786e\u4fdd\u6570\u5b57\u8bc1\u4e66\u7684\u5b89\u5168\u6027\u3002CA\u673a\u6784\u5728\u6570\u5b57\u8bc1\u4e66\u9881\u53d1\u8fc7\u7a0b\u4e2d\u8d77\u5230\u4e86\u4fe1\u4efb\u7684\u4e2d\u4ecb\u89d2\u8272\uff0c\u5176\u64cd\u4f5c\u57fa\u4e8e\u516c\u94a5\u57fa\u7840\u8bbe\u65bd\uff08PKI\uff09\u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u4e0b\u9762\u662fCA\u673a\u6784\u4f7f\u7528\u975e\u5bf9\u79f0\u52a0\u5bc6\u7684\u4e00\u822c\u6d41\u7a0b\uff1a"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"\u8bc1\u4e66\u8bf7\u6c42\uff1a \u5b9e\u4f53\uff08\u901a\u5e38\u662f\u4e2a\u4eba\u6216\u7ec4\u7ec7\uff09\u5411CA\u673a\u6784\u63d0\u4ea4\u8bc1\u4e66\u8bf7\u6c42\uff0c\u8bf7\u6c42\u5305\u62ec\u5b9e\u4f53\u7684\u516c\u94a5\u548c\u4e00\u4e9b\u8eab\u4efd\u4fe1\u606f\u3002"}),"\n",(0,i.jsx)(e.li,{children:"\u9a8c\u8bc1\u8eab\u4efd\uff1a CA\u673a\u6784\u5bf9\u8bc1\u4e66\u8bf7\u6c42\u4e2d\u7684\u8eab\u4efd\u4fe1\u606f\u8fdb\u884c\u9a8c\u8bc1\uff0c\u786e\u4fdd\u8bf7\u6c42\u8005\u786e\u5b9e\u62e5\u6709\u6240\u58f0\u660e\u7684\u8eab\u4efd\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4e00\u7cfb\u5217\u9a8c\u8bc1\u6b65\u9aa4\u6765\u5b8c\u6210\u3002"}),"\n",(0,i.jsx)(e.li,{children:"\u9881\u53d1\u6570\u5b57\u8bc1\u4e66\uff1a \u9a8c\u8bc1\u901a\u8fc7\u540e\uff0cCA\u673a\u6784\u4f7f\u7528\u81ea\u5df1\u7684\u79c1\u94a5\u5bf9\u5b9e\u4f53\u7684\u516c\u94a5\u548c\u8eab\u4efd\u4fe1\u606f\u8fdb\u884c\u7b7e\u540d\uff0c\u751f\u6210\u6570\u5b57\u8bc1\u4e66\u3002\u8fd9\u4e2a\u7b7e\u540d\u8fc7\u7a0b\u5c31\u662f\u4f7f\u7528\u975e\u5bf9\u79f0\u52a0\u5bc6\uff0c\u5176\u4e2dCA\u7684\u79c1\u94a5\u7528\u4e8e\u7b7e\u7f72\u8bc1\u4e66\u4fe1\u606f\u3002"}),"\n",(0,i.jsx)(e.li,{children:"\u8bc1\u4e66\u5206\u53d1\uff1a CA\u673a\u6784\u5c06\u751f\u6210\u7684\u6570\u5b57\u8bc1\u4e66\u53d1\u9001\u7ed9\u8bf7\u6c42\u8005\uff0c\u540c\u65f6\u53ef\u4ee5\u5c06\u8bc1\u4e66\u516c\u5f00\u53d1\u5e03\u5230\u516c\u5171\u76ee\u5f55\u4e2d\uff0c\u4ee5\u4fbf\u5176\u4ed6\u4eba\u53ef\u4ee5\u9a8c\u8bc1\u8bc1\u4e66\u7684\u771f\u5b9e\u6027\u3002"}),"\n",(0,i.jsx)(e.li,{children:"\u8bc1\u4e66\u9a8c\u8bc1\uff1a \u5728\u901a\u4fe1\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u5176\u4ed6\u4eba\u9700\u8981\u9a8c\u8bc1\u5b9e\u4f53\u7684\u8eab\u4efd\u65f6\uff0c\u4ed6\u4eec\u53ef\u4ee5\u4f7f\u7528CA\u673a\u6784\u516c\u5f00\u7684\u516c\u94a5\u6765\u9a8c\u8bc1\u6570\u5b57\u8bc1\u4e66\u7684\u7b7e\u540d\u3002\u5982\u679c\u9a8c\u8bc1\u901a\u8fc7\uff0c\u5c31\u53ef\u4ee5\u4fe1\u4efb\u8be5\u6570\u5b57\u8bc1\u4e66\u6240\u9644\u7684\u516c\u94a5\u3002"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"\u975e\u5bf9\u79f0\u52a0\u5bc6\u7684\u4f18\u52bf\u5728\u4e8e\u5b83\u63d0\u4f9b\u4e86\u66f4\u9ad8\u7684\u5b89\u5168\u6027\u3002\u5373\u4f7f\u5728\u516c\u5171\u73af\u5883\u4e0b\u4f20\u8f93\u516c\u94a5\uff0c\u4e5f\u65e0\u6cd5\u901a\u8fc7\u516c\u94a5\u8f7b\u677e\u8ba1\u7b97\u51fa\u79c1\u94a5\u3002\u8fd9\u4f7f\u5f97\u975e\u5bf9\u79f0\u52a0\u5bc6\u5728\u5b89\u5168\u5730\u5b9e\u73b0\u8eab\u4efd\u9a8c\u8bc1\u3001\u6570\u5b57\u7b7e\u540d\u548c\u52a0\u5bc6\u901a\u4fe1\u7b49\u573a\u666f\u4e2d\u53d1\u6325\u91cd\u8981\u4f5c\u7528\u3002"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:(0,i.jsx)(e.strong,{children:"\u76f8\u5bf9\u7684\uff0c\u4ec0\u4e48\u662f\u5bf9\u79f0\u52a0\u5bc6\u5462\uff1f"})})}),"\n",(0,i.jsx)(e.p,{children:"\u5bf9\u79f0\u52a0\u5bc6\u662f\u4e00\u79cd\u52a0\u5bc6\u7b97\u6cd5\uff0c\u5b83\u4f7f\u7528\u76f8\u540c\u7684\u5bc6\u94a5\u540c\u65f6\u8fdb\u884c\u6570\u636e\u7684\u52a0\u5bc6\u548c\u89e3\u5bc6\u3002\u8fd9\u610f\u5473\u7740\u5728\u5bf9\u79f0\u52a0\u5bc6\u4e2d\uff0c\u4f7f\u7528\u52a0\u5bc6\u548c\u89e3\u5bc6\u64cd\u4f5c\u7684\u76f8\u540c\u5bc6\u94a5\u3002\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\u5728\u52a0\u5bc6\u548c\u89e3\u5bc6\u7684\u8fc7\u7a0b\u4e2d\u90fd\u4f7f\u7528\u76f8\u540c\u7684\u5bc6\u94a5\uff0c\u56e0\u6b64\u5bc6\u94a5\u7684\u4fdd\u7ba1\u548c\u5206\u53d1\u53d8\u5f97\u81f3\u5173\u91cd\u8981\u3002\n\u6211\u4eec\u4e86\u89e3\u7684\u56fd\u5bc6SM4\u5c31\u662f\u91c7\u7528\u7684\u5bf9\u79f0\u52a0\u5bc6\u7684\u65b9\u5f0f\u5b9e\u73b0\u7684\uff0c\u6e90\u7801\u5de5\u5177\u5982\u4e0b\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'/**\n * \uff08\u5206\u7ec4\u5bc6\u7801\u7b97\u6cd5\uff09\u56fd\u5bc6\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\n */\n@Slf4j\npublic abstract class SM4Util {\n\n\tstatic {\n        Security.addProvider(new BouncyCastleProvider());\n    }\n\n    private static final Charset ENCODING = StandardCharsets.UTF_8;\n\n    public static final String ALGORITHM_NAME = "SM4";\n\n    // \u52a0\u5bc6\u7b97\u6cd5/\u5206\u7ec4\u52a0\u5bc6\u6a21\u5f0f/\u5206\u7ec4\u586b\u5145\u65b9\u5f0f\n    public static final String ALGORITHM_NAME_ECB_PADDING = "SM4/ECB/PKCS5Padding";\n\n    public static final String ALGORITHM_NAME_CBC_PADDING = "SM4/CBC/PKCS5Padding";\n\n    // 128-32\u4f4d16\u8fdb\u5236\uff1b256-64\u4f4d16\u8fdb\u5236\n    public static final int DEFAULT_KEY_SIZE = 128;\n\n    public static final String DEFAULT_KEY = "86C63180C2806ED1F47B859DE501215B";\n    public static final String DEFAULT_IV = "8F5CB6272B594B53AD1A2197361378DC";\n\n    private static Cipher generateCipherECB(String algorithmName, int mode, byte[] key) throws Exception {\n        Cipher cipher = Cipher.getInstance(algorithmName, BouncyCastleProvider.PROVIDER_NAME);\n        cipher.init(mode, new SecretKeySpec(key, ALGORITHM_NAME));\n        return cipher;\n    }\n\n    private static Cipher generateCipherCBC(String algorithmName, int mode, byte[] key, byte[] iv) throws Exception {\n        Cipher cipher = Cipher.getInstance(algorithmName, BouncyCastleProvider.PROVIDER_NAME);\n        cipher.init(mode, new SecretKeySpec(key, ALGORITHM_NAME), new IvParameterSpec(iv));\n        return cipher;\n    }\n    public static String generateKey() {\n        try {\n\t\t\treturn HexUtil.byteToHex(generateKey(DEFAULT_KEY_SIZE));\n\t\t} catch (Exception e) {\n\t\t\tlog.error(e.getMessage(), e);\n\t\t}\n        return null;\n    }\n\n    public static byte[] generateKey(int keySize) throws Exception {\n        KeyGenerator kg = KeyGenerator.getInstance(ALGORITHM_NAME, BouncyCastleProvider.PROVIDER_NAME);\n        kg.init(keySize, new SecureRandom());\n        return kg.generateKey().getEncoded();\n    }\n\n    protected static byte[] encryptECBPadding(byte[] data, byte[] key) throws Exception {\n        Cipher cipher = generateCipherECB(ALGORITHM_NAME_ECB_PADDING, Cipher.ENCRYPT_MODE, key);\n        return cipher.doFinal(data);\n    }\n\n\tprotected static byte[] decryptECBPadding(byte[] encrypted, byte[] key) throws Exception {\n\t    Cipher cipher = generateCipherECB(ALGORITHM_NAME_ECB_PADDING, Cipher.DECRYPT_MODE, key);\n\t    return cipher.doFinal(encrypted);\n\t}\n\n    protected static byte[] encryptCBCPadding(byte[] data, byte[] key, byte[] iv) throws Exception {\n        Cipher cipher = generateCipherCBC(ALGORITHM_NAME_CBC_PADDING, Cipher.ENCRYPT_MODE, key, iv);\n        return cipher.doFinal(data);\n    }\n\n\tprotected static byte[] decryptCBCPadding(byte[] encrypted, byte[] key, byte[] iv) throws Exception {\n\t    Cipher cipher = generateCipherCBC(ALGORITHM_NAME_CBC_PADDING, Cipher.DECRYPT_MODE, key, iv);\n\t    return cipher.doFinal(encrypted);\n\t}\n\n    public static String encrypt(String source) {\n        return encrypt(source, DEFAULT_KEY);\n    }\n    public static String encrypt(byte[] source) {\n        return encrypt(source, DEFAULT_KEY);\n    }\n    public static String encrypt(String source, String hexKey) {\n        return encrypt(source.getBytes(ENCODING), hexKey);\n    }\n    public static String encrypt(byte[] source, String hexKey) {\n        byte[] cipherArray;\n\t\ttry {\n\t\t\tcipherArray = encryptECBPadding(source, ByteUtils.fromHexString(hexKey));\n\t\t\treturn ByteUtils.toHexString(cipherArray);\n\t\t} catch (Exception e) {\n\t\t\tlog.error(e.getMessage(), e);\n\t\t}\n\n        return null;\n    }\n    public static byte[] decrypt(String encrypted) {\n\t\treturn decrypt(encrypted, DEFAULT_KEY);\n    }\n    public static String decryptToString(String encrypted) {\n\t\treturn decryptToString(encrypted, DEFAULT_KEY);\n    }\n    public static String decryptToString(String encrypted, String hexKey) {\n\t\treturn new String(decrypt(encrypted, hexKey), ENCODING);\n    }\n    public static byte[] decrypt(String encrypted, String hexKey) {\n\t\ttry {\n\t\t\treturn decryptECBPadding(ByteUtils.fromHexString(encrypted), ByteUtils.fromHexString(hexKey));\n\t\t} catch (Exception e) {\n\t\t\tlog.error(e.getMessage(), e);\n\t\t}\n\t\treturn encrypted.getBytes(StandardCharsets.UTF_8);\n    }\n    public static String encrypt(String source, String hexKey, String iv) {\n        return encrypt(source.getBytes(ENCODING), hexKey, iv);\n    }\n    public static String encrypt(byte[] source, String hexKey, String iv) {\n        byte[] cipherArray;\n\t\ttry {\n\t\t\tcipherArray = encryptCBCPadding(\n\t\t\t\t\t\t\tsource\n\t\t\t\t\t\t\t, ByteUtils.fromHexString(hexKey)\n\t\t\t\t\t\t\t, ByteUtils.fromHexString(iv));\n\t\t\treturn ByteUtils.toHexString(cipherArray);\n\t\t} catch (Exception e) {\n\t\t\tlog.error(e.getMessage(), e);\n\t\t\tthrow new RuntimeException("\u6570\u636e\u52a0\u5bc6\u5931\u8d25", e);\n\t\t}\n    }\n    public static String decryptToString(String encrypted, String hexKey, String iv) {\n\t\treturn new String(decrypt(encrypted, hexKey, iv), ENCODING);\n    }\n\n    public static byte[] decrypt(String encrypted, String hexKey, String iv) {\n\t\ttry {\n\t\t\tif (StringUtils.isBlank(encrypted)) {\n\t\t\t\treturn new byte[] {};\n\t\t\t}\n\n\t\t\treturn decryptCBCPadding(\n\t\t\t\t \tByteUtils.fromHexString(encrypted)\n\t\t\t\t\t, ByteUtils.fromHexString(hexKey)\n\t\t\t\t\t, ByteUtils.fromHexString(iv));\n\t\t} catch (Exception e) {\n\t\t\tlog.error(e.getMessage(), e);\n\t\t}\n\t\treturn encrypted.getBytes(StandardCharsets.UTF_8);\n    }\n}\n\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.em,{children:(0,i.jsx)(e.strong,{children:"\u76f8\u4fe1\u4f60\u4e5f\u4e00\u5b9a\u542c\u8fc7\u56fd\u5bc6SM3\u7b97\u6cd5\uff0c\u5b83\u662f\u5bf9\u79f0\u52a0\u5bc6\u8fd8\u662f\u975e\u5bf9\u79f0\u52a0\u5bc6\u5462\uff1f"})}),"\n\u5176\u5b9eSM3\u662f\u4e00\u79cd\u5bc6\u7801\u6742\u51d1\u7b97\u6cd5\uff0c\u7528\u4e8e\u751f\u6210\u6d88\u606f\u7684\u54c8\u5e0c\u503c\uff0c\u4e3b\u8981\u7528\u4e8e\u6570\u636e\u5b8c\u6574\u6027\u9a8c\u8bc1\u3001\u6570\u5b57\u7b7e\u540d\u7b49\u573a\u666f\uff0c\u800c\u4e0d\u662f\u8fdb\u884c\u52a0\u5bc6\u548c\u89e3\u5bc6\u64cd\u4f5c\u3002\u6240\u4ee5\u5b83\u65e2\u4e0d\u662f\u5bf9\u79f0\u52a0\u5bc6\u4e5f\u4e0d\u662f\u975e\u5bf9\u79f0\u52a0\u5bc6\uff0c\u5b83\u5e38\u5e38\u4e0eSM2\u4e0eSM4\u7ec4\u5408\u4e00\u8d77\u4f7f\u7528\uff0c\u53ef\u4ee5\u628a\u5b83\u770b\u6210\u4e00\u4e2a\u968f\u673a\u6570\u3002\n",(0,i.jsx)(e.em,{children:"\u4f8b\u5982\uff1a"}),"\n\u7cfb\u7edf\u6570\u636e\u5b58\u50a8\u52a0\u5bc6\u5e94\u91c7\u7528SM3+SM4\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002\n\u7cfb\u7edf\u6570\u636e\u4f20\u8f93\u52a0\u5bc6\u5e94\u91c7\u7528SM2+SM3\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"\u603b\u7ed3"}),"\n\u5728\u7cfb\u7edf\u5b89\u5168\u6d4b\u8bd5\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u91c7\u7528\u591a\u5c42\u52a0\u5bc6\u7b97\u6cd5\u3001\u5408\u7406\u7684\u5b89\u5168\u67b6\u6784\u8bbe\u8ba1\u4ee5\u53ca\u4e25\u683c\u7684\u6570\u636e\u5b89\u5168\u63aa\u65bd\uff0c\u63d0\u9ad8\u4e86\u7cfb\u7edf\u5728\u8eab\u4efd\u8ba4\u8bc1\u3001\u6388\u6743\u3001\u8bbf\u95ee\u63a7\u5236\u3001\u5ba1\u8ba1\u548c\u8d44\u4ea7\u4fdd\u62a4\u7b49\u65b9\u9762\u7684\u5b89\u5168\u6027\u3002\u8fd9\u6709\u52a9\u4e8e\u5728\u4e92\u8054\u7f51\u548c\u65b0\u5174\u6280\u672f\u65f6\u4ee3\u4e2d\u66f4\u597d\u5730\u5904\u7406\u6570\u636e\u5b89\u5168\u95ee\u9898\uff0c\u7279\u522b\u9002\u7528\u4e8e\u5927\u578b\u653f\u5e9c\u9879\u76ee\u7b49\u5bf9\u5b89\u5168\u6027\u8981\u6c42\u8f83\u9ad8\u7684\u573a\u666f\u3002\u6570\u636e\u5b89\u5168\u76f8\u5173\u7684\u77e5\u8bc6\u5c5e\u4e8e\u53e6\u4e00\u4e2a\u9886\u57df\u4e86\uff0c\u77e5\u8bc6\u70b9\u771f\u662f\u6df1\u4e0d\u53ef\u6d4b\uff0c\u8fd8\u9700\u8981\u5e73\u65f6\u591a\u5b66\u4e60\uff0c\u79ef\u7d2f\u66f4\u591a\u7684\u77e5\u8bc6\u50a8\u5907\u624d\u884c\u3002"]})]})}function d(t={}){const{wrapper:e}={...(0,c.R)(),...t.components};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(l,{...t})}):l(t)}},28453:(t,e,n)=>{n.d(e,{R:()=>a,x:()=>y});var r=n(96540);const i={},c=r.createContext(i);function a(t){const e=r.useContext(c);return r.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function y(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:a(t.components),r.createElement(c.Provider,{value:e},t.children)}},42922:t=>{t.exports=JSON.parse('{"permalink":"/blog/product-security-testing-problems","editUrl":"https://github.com/Jachen99/Jachen99.github.io/tree/V4.0.0/blog/2024/03-01-\u7b2c\u4e09\u65b9\u6d4b\u8bd5-\u7cfb\u7edf\u5b89\u5168\u6d4b\u8bd5\u95ee\u9898\u4e4b\u6570\u636e\u52a0\u5bc6.md","source":"@site/blog/2024/03-01-\u7b2c\u4e09\u65b9\u6d4b\u8bd5-\u7cfb\u7edf\u5b89\u5168\u6d4b\u8bd5\u95ee\u9898\u4e4b\u6570\u636e\u52a0\u5bc6.md","title":"\u7b2c\u4e09\u65b9\u6d4b\u8bd5-\u7cfb\u7edf\u5b89\u5168\u6d4b\u8bd5\u95ee\u9898\u4e4b\u6570\u636e\u52a0\u5bc6","description":"\u73b0\u5728\u56fd\u5185\u8d8a\u6765\u8d8a\u91cd\u89c6\u7cfb\u7edf\u5b89\u5168\uff0c\u6700\u8fd1\u6211\u4eec\u516c\u53f8\u5728\u505a\u7b2c\u4e09\u65b9\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\u5bf9\u7cfb\u7edf\u5b89\u5168\u3001\u7cfb\u7edf\u6027\u80fd\u7b49\u505a\u51fa\u4e86\u4e25\u683c\u7684\u8981\u6c42\uff0c\u5e76\u8fdb\u884c\u4e86\u5f88\u5927\u7684\u6574\u6539\uff0c\u5c31\u4ece\u8fd9\u7bc7\u6587\u7ae0\u5f00\u59cb\u603b\u7ed3\u4e00\u4e0b\u6700\u8fd1\u4e09\u4e2a\u6708\u4ee5\u53ca\u4ee5\u540e\u8fd8\u4f1a\u7ee7\u7eed\u6574\u6539\u7684\u6d89\u53ca\u7cfb\u7edf\u5b89\u5168\u7684\u76f8\u5173\u6d4b\u8bd5\u6f0f\u6d1e\u7684\u4fee\u6539\u65b9\u6848\uff0c\u76f8\u4fe1\u8fd9\u4e9b\u95ee\u9898\u4f1a\u5e2e\u52a9\u5230\u5927\u5bb6\uff0c\u5c24\u5176\u662f\u6bd4\u8f83\u5927\u578b\u7684\u653f\u5e9c\u9879\u76ee\uff0c\u5bf9\u7cfb\u7edf\u5b89\u5168\u66f4\u52a0\u6ce8\u91cd\u3002","date":"2024-03-01T00:00:00.000Z","tags":[{"inline":true,"label":"\u5b89\u5168","permalink":"/blog/tags/\u5b89\u5168"}],"readingTime":10.29,"hasTruncateMarker":false,"authors":[{"name":"\u5b63\u51a0\u81e3","title":"\u540e\u7aef\u7814\u53d1\u5de5\u7a0b\u5e08","url":"https://github.com/jachen99","page":{"permalink":"/blog/authors/jiguanchen"},"socials":{"github":"https://github.com/jachen99"},"imageURL":"https://github.com/jachen99.png","key":"jiguanchen"}],"frontMatter":{"slug":"product-security-testing-problems","title":"\u7b2c\u4e09\u65b9\u6d4b\u8bd5-\u7cfb\u7edf\u5b89\u5168\u6d4b\u8bd5\u95ee\u9898\u4e4b\u6570\u636e\u52a0\u5bc6","authors":["jiguanchen"],"tags":["\u5b89\u5168"]},"unlisted":false,"prevItem":{"title":"\u5b89\u5168\u529f\u80fd\u4e4b\u7cfb\u7edf\u9000\u51fa\u540eJWT\u4ee4\u724c\u5931\u6548","permalink":"/blog/product-security-system-exit-jwt-invalid"},"nextItem":{"title":"\u7b2c\u4e09\u65b9\u6d4b\u8bd5-\u7cfb\u7edf\u5b89\u5168\u6d4b\u8bd5\u95ee\u9898\u4e4b\u6570\u636e\u52a0\u5bc6","permalink":"/blog/data-encryption-in-security-testing"}}')}}]);
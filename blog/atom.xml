<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jachen99.github.io/blog</id>
    <title>软件一班季同学的世界 Blog</title>
    <updated>2024-07-09T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jachen99.github.io/blog"/>
    <subtitle>软件一班季同学的世界 Blog</subtitle>
    <icon>https://jachen99.github.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[售电市场智能分析预测系统]]></title>
        <id>https://jachen99.github.io/blog/product-5</id>
        <link href="https://jachen99.github.io/blog/product-5"/>
        <updated>2024-07-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[在Java开发中，处理Excel文件是一个常见的需求。EasyExcel作为一个流行的Excel操作库，提供了方便而高效的API来读写Excel文件。然而，有时会遇到数据第一行被误读为表头的问题，特别是在Excel文件的第一行不是标准表头而是实际数据时，这一问题显得尤为突出。本文将详细讨论这一问题的根本原因，并提供一种有效的解决方案。]]></summary>
        <content type="html"><![CDATA[<p>在Java开发中，处理Excel文件是一个常见的需求。EasyExcel作为一个流行的Excel操作库，提供了方便而高效的API来读写Excel文件。然而，有时会遇到数据第一行被误读为表头的问题，特别是在Excel文件的第一行不是标准表头而是实际数据时，这一问题显得尤为突出。本文将详细讨论这一问题的根本原因，并提供一种有效的解决方案。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-easyexcel简介">2. EasyExcel简介<a href="https://jachen99.github.io/blog/product-5#2-easyexcel%E7%AE%80%E4%BB%8B" class="hash-link" aria-label="2. EasyExcel简介的直接链接" title="2. EasyExcel简介的直接链接">​</a></h2>
<p>EasyExcel是阿里巴巴开源的一款Java操作Excel的工具库，它提供了强大的功能，支持大数据量的读写操作，并且提供了丰富的样式和格式处理功能，适用于各种场景下的Excel文件处理需求。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-问题描述">3. 问题描述<a href="https://jachen99.github.io/blog/product-5#3-%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0" class="hash-link" aria-label="3. 问题描述的直接链接" title="3. 问题描述的直接链接">​</a></h2>
<p>在使用EasyExcel读取Excel文件时，经常会出现第一行数据被错误地识别为表头的情况。这一问题的根本原因在于EasyExcel在某些情况下无法正确识别Excel文件中数据行和表头行的区分，特别是当Excel文件结构比较复杂或者存在特定格式时，EasyExcel的默认解析逻辑可能会出现偏差。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-解决方案详解">4. 解决方案详解<a href="https://jachen99.github.io/blog/product-5#4-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E8%AF%A6%E8%A7%A3" class="hash-link" aria-label="4. 解决方案详解的直接链接" title="4. 解决方案详解的直接链接">​</a></h2>
<p>为了解决数据第一行获取问题，我们可以采取以下步骤来调整和优化EasyExcel的读取操作，确保能够正确获取实际数据行而非表头行：</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="41-方案1手动指定数据起始行">4.1 方案1：手动指定数据起始行<a href="https://jachen99.github.io/blog/product-5#41-%E6%96%B9%E6%A1%881%E6%89%8B%E5%8A%A8%E6%8C%87%E5%AE%9A%E6%95%B0%E6%8D%AE%E8%B5%B7%E5%A7%8B%E8%A1%8C" class="hash-link" aria-label="4.1 方案1：手动指定数据起始行的直接链接" title="4.1 方案1：手动指定数据起始行的直接链接">​</a></h3>
<p>在读取Excel文件时，手动指定数据的起始行，而不依赖EasyExcel的自动识别。这可以通过设置<code>headRowNumber</code>来实现，明确告知EasyExcel从第几行开始读取数据。</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ExcelReaderBuilder readBuilder = EasyExcel.read(inputStream, ExcelData.class, new ExcelDataListener())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .sheet().headRowNumber(2) // 指定从第3行开始读取数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .doRead();</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>在上述代码中，通过<code>headRowNumber(2)</code>指定从第3行开始读取数据，避免将第一行误读为表头。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="42-数据处理逻辑中排除表头行">4.2 数据处理逻辑中排除表头行<a href="https://jachen99.github.io/blog/product-5#42-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E9%80%BB%E8%BE%91%E4%B8%AD%E6%8E%92%E9%99%A4%E8%A1%A8%E5%A4%B4%E8%A1%8C" class="hash-link" aria-label="4.2 数据处理逻辑中排除表头行的直接链接" title="4.2 数据处理逻辑中排除表头行的直接链接">​</a></h3>
<p>在实际数据处理逻辑中，可以通过逻辑判断排除表头行，确保只处理实际的数据行。例如，在<code>invoke</code>方法中可以添加逻辑判断：</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@Override </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public void invoke(ExcelData data, AnalysisContext context) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (context.readRowHolder().getRowIndex() &gt; 0) { // 跳过表头行</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 处理实际数据逻辑</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>通过<code>context.readRowHolder().getRowIndex() &gt; 0</code>判断当前行索引大于0时才处理数据，跳过表头行的处理。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="43-使用后处理器进行二次处理">4.3 使用后处理器进行二次处理<a href="https://jachen99.github.io/blog/product-5#43-%E4%BD%BF%E7%94%A8%E5%90%8E%E5%A4%84%E7%90%86%E5%99%A8%E8%BF%9B%E8%A1%8C%E4%BA%8C%E6%AC%A1%E5%A4%84%E7%90%86" class="hash-link" aria-label="4.3 使用后处理器进行二次处理的直接链接" title="4.3 使用后处理器进行二次处理的直接链接">​</a></h3>
<p>EasyExcel提供了后处理器（Handler）机制，在数据读取完成后可以进行二次处理。可以在<code>doAfterAllAnalysed</code>方法中对数据进行进一步处理或过滤，确保最终数据的准确性和完整性。</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@Override </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public void doAfterAllAnalysed(AnalysisContext context) { </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 数据处理完成后的逻辑 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    processData(dataList);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>在上述代码中，可以在<code>doAfterAllAnalysed</code>方法中调用<code>processData</code>方法，对数据进行进一步的处理或者存储操作。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="44-示例代码">4.4 示例代码<a href="https://jachen99.github.io/blog/product-5#44-%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="4.4 示例代码的直接链接" title="4.4 示例代码的直接链接">​</a></h3>
<p>以下是一个完整的示例代码，展示了如何使用EasyExcel读取Excel文件并处理数据，同时避免数据第一行被误读为表头的问题：</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">import com.alibaba.excel.EasyExcel;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import com.alibaba.excel.context.AnalysisContext;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import com.alibaba.excel.event.AnalysisEventListener;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import com.alibaba.excel.read.builder.ExcelReaderBuilder;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.io.FileInputStream;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.io.IOException;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.io.InputStream;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.util.ArrayList;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.util.List;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class ExcelReaderExample {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String fileName = "path/to/your/excel/file.xlsx";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        InputStream inputStream = null;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        try {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            inputStream = new FileInputStream(fileName);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ExcelReaderBuilder readBuilder = EasyExcel.read(inputStream, ExcelData.class, new ExcelDataListener());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            readBuilder.sheet().headRowNumber(2); // 指定从第3行开始读取数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            readBuilder.doRead();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } catch (IOException e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            e.printStackTrace();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } finally {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (inputStream != null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                try {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    inputStream.close();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                } catch (IOException e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    e.printStackTrace();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static class ExcelDataListener extends AnalysisEventListener&lt;ExcelData&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private List&lt;ExcelData&gt; dataList = new ArrayList&lt;&gt;();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public void invoke(ExcelData data, AnalysisContext context) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (context.readRowHolder().getRowIndex() &gt; 0) { // 跳过表头行</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                // 处理实际数据逻辑</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                dataList.add(data);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public void doAfterAllAnalysed(AnalysisContext context) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // 数据处理完成后的逻辑</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            processData(dataList);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private void processData(List&lt;ExcelData&gt; dataList) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // 处理数据的具体逻辑</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            for (ExcelData data : dataList) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                System.out.println(data.toString());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static class ExcelData {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // Excel中的数据字段对应的Java属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private String column1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private String column2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 省略getter和setter方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="45-方案2第一行数据读在表头单独处理">4.5 方案2：第一行数据读在表头单独处理<a href="https://jachen99.github.io/blog/product-5#45-%E6%96%B9%E6%A1%882%E7%AC%AC%E4%B8%80%E8%A1%8C%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%9C%A8%E8%A1%A8%E5%A4%B4%E5%8D%95%E7%8B%AC%E5%A4%84%E7%90%86" class="hash-link" aria-label="4.5 方案2：第一行数据读在表头单独处理的直接链接" title="4.5 方案2：第一行数据读在表头单独处理的直接链接">​</a></h3>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@SneakyThrows</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public byte[] exportExcel(List&lt;String&gt; sheet1Ids, List&lt;String&gt; sheet2Ids, List&lt;String&gt; sheet3Ids, String startDate, String endDate) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    byte[] result;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 读取模版</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         InputStream inputStream = templateFileService.getTemplateInputStreamByPath(dataComparisonFileResource.getPath())) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ExcelWriter excelWriter = EasyExcel.write(outputStream)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .withTemplate(inputStream)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .autoCloseStream(true)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .registerWriteHandler(new CustomSheet1CellWriteHandler())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .build();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 写入表1 数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;LfDispatchDataComparisonGridOperationVo&gt; sheet1Data = getGridOperationData(sheet1Ids, startDate, endDate);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.writerSheet1(excelWriter, sheet1Data);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 写入表2 数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;LfDispatchDataComparisonGwEnergyVo&gt; sheet2Data = getGwEnergyData(sheet2Ids, startDate, endDate);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.writerSheet2(excelWriter, sheet2Data);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 写入表3 数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;LfDispatchDataComparisonNewEnergyOperationVo&gt; sheet3Data = getNewEnergyOperationData(sheet3Ids, startDate, endDate);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.writerSheet3(excelWriter, sheet3Data);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 生成excel</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        excelWriter.finish();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 确保所有内容都写入输出流中</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        result = outputStream.toByteArray();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return result;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * 自定义sheet1的cell样式 用于标记 负荷占比、电量占比 大于1的单元格</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public static class CustomSheet1CellWriteHandler implements WorkbookWriteHandler, CellWriteHandler {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * 处理第一行数据 (easyExcel工具的bug 会将第一行数据读在表头)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     *</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * @param context 上下文</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void afterCellDispose(CellWriteHandlerContext context) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (context.getRowIndex() == 2 &amp;&amp; (context.getColumnIndex() == 14 || context.getColumnIndex() == 15)) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // 处理第第一个sheet</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Sheet sheet = context.getRow().getSheet().getWorkbook().getSheetAt(0);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Row row = sheet.getRow(2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Cell cell14 = row.getCell(14);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Cell cell15 = row.getCell(15);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // 应用红色样式</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            applyRedStyleToCells(cell14, cell15);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * 处理除了第一行以外的其他数据行</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     *</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * @param context 上下文</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void afterWorkbookDispose(WorkbookWriteHandlerContext context) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Workbook workbook = context.getWriteWorkbookHolder().getWorkbook();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 只处理 sheet1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Sheet sheet = workbook.getSheetAt(0);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        applyRedStyleToSheet(sheet);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * 按列标记红色</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     *</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * @param sheet 工作表</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private void applyRedStyleToSheet(Sheet sheet) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for (Row row : sheet) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            applyRedStyleToCells(row.getCell(14), row.getCell(15));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * 对指定的单元格应用红色字体样式</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     *</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * @param cells 需要应用</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">红色样式的单元格</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private void applyRedStyleToCells(Cell... cells) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for (Cell cell : cells) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (cell != null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Workbook workbook = cell.getSheet().getWorkbook();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                CellStyle redStyle = workbook.createCellStyle();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Font redFont = workbook.createFont();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                redFont.setColor(IndexedColors.RED.getIndex());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                redStyle.setFont(redFont);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                cell.setCellStyle(redStyle);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-结论">5. 结论<a href="https://jachen99.github.io/blog/product-5#5-%E7%BB%93%E8%AE%BA" class="hash-link" aria-label="5. 结论的直接链接" title="5. 结论的直接链接">​</a></h2>
<p>我总结：建议不再使用EasyExcel工具。</p>
<hr>]]></content>
        <author>
            <name>季冠臣</name>
            <uri>https://github.com/jachen99</uri>
        </author>
        <category label="EasyExcel" term="EasyExcel"/>
        <category label="数据处理" term="数据处理"/>
        <category label="我的Bug" term="我的Bug"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[售电市场智能分析预测系统]]></title>
        <id>https://jachen99.github.io/blog/product-5</id>
        <link href="https://jachen99.github.io/blog/product-5"/>
        <updated>2023-10-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[该系统针对售电市场智能分析需求，支持行业分类和售电数据分析。]]></summary>
        <content type="html"><![CDATA[<p>在Java开发中，处理Excel文件是一个常见的需求。EasyExcel作为一个流行的Excel操作库，提供了方便而高效的API来读写Excel文件。然而，有时会遇到数据第一行被误读为表头的问题，特别是在Excel文件的第一行不是标准表头而是实际数据时，这一问题显得尤为突出。本文将详细讨论这一问题的根本原因，并提供一种有效的解决方案。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-easyexcel简介">2. EasyExcel简介<a href="https://jachen99.github.io/blog/product-5#2-easyexcel%E7%AE%80%E4%BB%8B" class="hash-link" aria-label="2. EasyExcel简介的直接链接" title="2. EasyExcel简介的直接链接">​</a></h2>
<p>EasyExcel是阿里巴巴开源的一款Java操作Excel的工具库，它提供了强大的功能，支持大数据量的读写操作，并且提供了丰富的样式和格式处理功能，适用于各种场景下的Excel文件处理需求。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-问题描述">3. 问题描述<a href="https://jachen99.github.io/blog/product-5#3-%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0" class="hash-link" aria-label="3. 问题描述的直接链接" title="3. 问题描述的直接链接">​</a></h2>
<p>在使用EasyExcel读取Excel文件时，经常会出现第一行数据被错误地识别为表头的情况。这一问题的根本原因在于EasyExcel在某些情况下无法正确识别Excel文件中数据行和表头行的区分，特别是当Excel文件结构比较复杂或者存在特定格式时，EasyExcel的默认解析逻辑可能会出现偏差。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-解决方案详解">4. 解决方案详解<a href="https://jachen99.github.io/blog/product-5#4-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E8%AF%A6%E8%A7%A3" class="hash-link" aria-label="4. 解决方案详解的直接链接" title="4. 解决方案详解的直接链接">​</a></h2>
<p>为了解决数据第一行获取问题，我们可以采取以下步骤来调整和优化EasyExcel的读取操作，确保能够正确获取实际数据行而非表头行：</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="41-方案1手动指定数据起始行">4.1 方案1：手动指定数据起始行<a href="https://jachen99.github.io/blog/product-5#41-%E6%96%B9%E6%A1%881%E6%89%8B%E5%8A%A8%E6%8C%87%E5%AE%9A%E6%95%B0%E6%8D%AE%E8%B5%B7%E5%A7%8B%E8%A1%8C" class="hash-link" aria-label="4.1 方案1：手动指定数据起始行的直接链接" title="4.1 方案1：手动指定数据起始行的直接链接">​</a></h3>
<p>在读取Excel文件时，手动指定数据的起始行，而不依赖EasyExcel的自动识别。这可以通过设置<code>headRowNumber</code>来实现，明确告知EasyExcel从第几行开始读取数据。</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ExcelReaderBuilder readBuilder = EasyExcel.read(inputStream, ExcelData.class, new ExcelDataListener())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .sheet().headRowNumber(2) // 指定从第3行开始读取数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .doRead();</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>在上述代码中，通过<code>headRowNumber(2)</code>指定从第3行开始读取数据，避免将第一行误读为表头。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="42-数据处理逻辑中排除表头行">4.2 数据处理逻辑中排除表头行<a href="https://jachen99.github.io/blog/product-5#42-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E9%80%BB%E8%BE%91%E4%B8%AD%E6%8E%92%E9%99%A4%E8%A1%A8%E5%A4%B4%E8%A1%8C" class="hash-link" aria-label="4.2 数据处理逻辑中排除表头行的直接链接" title="4.2 数据处理逻辑中排除表头行的直接链接">​</a></h3>
<p>在实际数据处理逻辑中，可以通过逻辑判断排除表头行，确保只处理实际的数据行。例如，在<code>invoke</code>方法中可以添加逻辑判断：</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@Override </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public void invoke(ExcelData data, AnalysisContext context) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (context.readRowHolder().getRowIndex() &gt; 0) { // 跳过表头行</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 处理实际数据逻辑</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>通过<code>context.readRowHolder().getRowIndex() &gt; 0</code>判断当前行索引大于0时才处理数据，跳过表头行的处理。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="43-使用后处理器进行二次处理">4.3 使用后处理器进行二次处理<a href="https://jachen99.github.io/blog/product-5#43-%E4%BD%BF%E7%94%A8%E5%90%8E%E5%A4%84%E7%90%86%E5%99%A8%E8%BF%9B%E8%A1%8C%E4%BA%8C%E6%AC%A1%E5%A4%84%E7%90%86" class="hash-link" aria-label="4.3 使用后处理器进行二次处理的直接链接" title="4.3 使用后处理器进行二次处理的直接链接">​</a></h3>
<p>EasyExcel提供了后处理器（Handler）机制，在数据读取完成后可以进行二次处理。可以在<code>doAfterAllAnalysed</code>方法中对数据进行进一步处理或过滤，确保最终数据的准确性和完整性。</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@Override </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public void doAfterAllAnalysed(AnalysisContext context) { </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 数据处理完成后的逻辑 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    processData(dataList);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>在上述代码中，可以在<code>doAfterAllAnalysed</code>方法中调用<code>processData</code>方法，对数据进行进一步的处理或者存储操作。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="44-示例代码">4.4 示例代码<a href="https://jachen99.github.io/blog/product-5#44-%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="4.4 示例代码的直接链接" title="4.4 示例代码的直接链接">​</a></h3>
<p>以下是一个完整的示例代码，展示了如何使用EasyExcel读取Excel文件并处理数据，同时避免数据第一行被误读为表头的问题：</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">import com.alibaba.excel.EasyExcel;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import com.alibaba.excel.context.AnalysisContext;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import com.alibaba.excel.event.AnalysisEventListener;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import com.alibaba.excel.read.builder.ExcelReaderBuilder;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.io.FileInputStream;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.io.IOException;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.io.InputStream;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.util.ArrayList;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.util.List;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class ExcelReaderExample {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String fileName = "path/to/your/excel/file.xlsx";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        InputStream inputStream = null;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        try {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            inputStream = new FileInputStream(fileName);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ExcelReaderBuilder readBuilder = EasyExcel.read(inputStream, ExcelData.class, new ExcelDataListener());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            readBuilder.sheet().headRowNumber(2); // 指定从第3行开始读取数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            readBuilder.doRead();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } catch (IOException e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            e.printStackTrace();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } finally {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (inputStream != null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                try {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    inputStream.close();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                } catch (IOException e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    e.printStackTrace();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static class ExcelDataListener extends AnalysisEventListener&lt;ExcelData&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private List&lt;ExcelData&gt; dataList = new ArrayList&lt;&gt;();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public void invoke(ExcelData data, AnalysisContext context) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (context.readRowHolder().getRowIndex() &gt; 0) { // 跳过表头行</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                // 处理实际数据逻辑</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                dataList.add(data);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public void doAfterAllAnalysed(AnalysisContext context) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // 数据处理完成后的逻辑</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            processData(dataList);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private void processData(List&lt;ExcelData&gt; dataList) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // 处理数据的具体逻辑</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            for (ExcelData data : dataList) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                System.out.println(data.toString());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static class ExcelData {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // Excel中的数据字段对应的Java属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private String column1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private String column2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 省略getter和setter方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="45-方案2第一行数据读在表头单独处理">4.5 方案2：第一行数据读在表头单独处理<a href="https://jachen99.github.io/blog/product-5#45-%E6%96%B9%E6%A1%882%E7%AC%AC%E4%B8%80%E8%A1%8C%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%9C%A8%E8%A1%A8%E5%A4%B4%E5%8D%95%E7%8B%AC%E5%A4%84%E7%90%86" class="hash-link" aria-label="4.5 方案2：第一行数据读在表头单独处理的直接链接" title="4.5 方案2：第一行数据读在表头单独处理的直接链接">​</a></h3>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@SneakyThrows</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public byte[] exportExcel(List&lt;String&gt; sheet1Ids, List&lt;String&gt; sheet2Ids, List&lt;String&gt; sheet3Ids, String startDate, String endDate) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    byte[] result;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 读取模版</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         InputStream inputStream = templateFileService.getTemplateInputStreamByPath(dataComparisonFileResource.getPath())) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ExcelWriter excelWriter = EasyExcel.write(outputStream)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .withTemplate(inputStream)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .autoCloseStream(true)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .registerWriteHandler(new CustomSheet1CellWriteHandler())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .build();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 写入表1 数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;LfDispatchDataComparisonGridOperationVo&gt; sheet1Data = getGridOperationData(sheet1Ids, startDate, endDate);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.writerSheet1(excelWriter, sheet1Data);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 写入表2 数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;LfDispatchDataComparisonGwEnergyVo&gt; sheet2Data = getGwEnergyData(sheet2Ids, startDate, endDate);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.writerSheet2(excelWriter, sheet2Data);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 写入表3 数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;LfDispatchDataComparisonNewEnergyOperationVo&gt; sheet3Data = getNewEnergyOperationData(sheet3Ids, startDate, endDate);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.writerSheet3(excelWriter, sheet3Data);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 生成excel</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        excelWriter.finish();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 确保所有内容都写入输出流中</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        result = outputStream.toByteArray();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return result;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * 自定义sheet1的cell样式 用于标记 负荷占比、电量占比 大于1的单元格</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public static class CustomSheet1CellWriteHandler implements WorkbookWriteHandler, CellWriteHandler {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * 处理第一行数据 (easyExcel工具的bug 会将第一行数据读在表头)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     *</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * @param context 上下文</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void afterCellDispose(CellWriteHandlerContext context) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (context.getRowIndex() == 2 &amp;&amp; (context.getColumnIndex() == 14 || context.getColumnIndex() == 15)) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // 处理第第一个sheet</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Sheet sheet = context.getRow().getSheet().getWorkbook().getSheetAt(0);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Row row = sheet.getRow(2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Cell cell14 = row.getCell(14);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Cell cell15 = row.getCell(15);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // 应用红色样式</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            applyRedStyleToCells(cell14, cell15);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * 处理除了第一行以外的其他数据行</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     *</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * @param context 上下文</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void afterWorkbookDispose(WorkbookWriteHandlerContext context) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Workbook workbook = context.getWriteWorkbookHolder().getWorkbook();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 只处理 sheet1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Sheet sheet = workbook.getSheetAt(0);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        applyRedStyleToSheet(sheet);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * 按列标记红色</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     *</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * @param sheet 工作表</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private void applyRedStyleToSheet(Sheet sheet) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for (Row row : sheet) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            applyRedStyleToCells(row.getCell(14), row.getCell(15));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * 对指定的单元格应用红色字体样式</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     *</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * @param cells 需要应用</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">红色样式的单元格</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private void applyRedStyleToCells(Cell... cells) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for (Cell cell : cells) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (cell != null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Workbook workbook = cell.getSheet().getWorkbook();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                CellStyle redStyle = workbook.createCellStyle();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Font redFont = workbook.createFont();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                redFont.setColor(IndexedColors.RED.getIndex());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                redStyle.setFont(redFont);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                cell.setCellStyle(redStyle);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-结论">5. 结论<a href="https://jachen99.github.io/blog/product-5#5-%E7%BB%93%E8%AE%BA" class="hash-link" aria-label="5. 结论的直接链接" title="5. 结论的直接链接">​</a></h2>
<p>我总结：建议不再使用EasyExcel工具。</p>
<hr>]]></content>
        <author>
            <name>季冠臣</name>
            <uri>https://github.com/jachen99</uri>
        </author>
        <category label="电力行业" term="电力行业"/>
        <category label="预测" term="预测"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[海量用户用电需求分析预测系统]]></title>
        <id>https://jachen99.github.io/blog/product-3</id>
        <link href="https://jachen99.github.io/blog/product-3"/>
        <updated>2023-04-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[该系统旨在分析和预测海量用户的用电需求，支持多维度的市场跟踪、电量预警和报表生成。]]></summary>
        <content type="html"><![CDATA[<p>该系统旨在分析和预测海量用户的用电需求，支持多维度的市场跟踪、电量预警和报表生成。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-背景意义">1. 背景意义<a href="https://jachen99.github.io/blog/product-3#1-%E8%83%8C%E6%99%AF%E6%84%8F%E4%B9%89" class="hash-link" aria-label="1. 背景意义的直接链接" title="1. 背景意义的直接链接">​</a></h2>
<p>通过该系统，可以全面分析用户的用电需求，提升供电部门的服务效率和精准度。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-理论研究目标">2. 理论研究目标<a href="https://jachen99.github.io/blog/product-3#2-%E7%90%86%E8%AE%BA%E7%A0%94%E7%A9%B6%E7%9B%AE%E6%A0%87" class="hash-link" aria-label="2. 理论研究目标的直接链接" title="2. 理论研究目标的直接链接">​</a></h2>
<p>研究并建立科学、准确的用户用电需求分析模型，满足不同行业和用户的预测需求。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-总体建设目标">3. 总体建设目标<a href="https://jachen99.github.io/blog/product-3#3-%E6%80%BB%E4%BD%93%E5%BB%BA%E8%AE%BE%E7%9B%AE%E6%A0%87" class="hash-link" aria-label="3. 总体建设目标的直接链接" title="3. 总体建设目标的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="数据中心">数据中心<a href="https://jachen99.github.io/blog/product-3#%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83" class="hash-link" aria-label="数据中心的直接链接" title="数据中心的直接链接">​</a></h3>
<ul>
<li>市场跟踪与分析</li>
<li>电量及负荷预测</li>
<li>电量预警</li>
<li>报表报告</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-总体建设方案">4. 总体建设方案<a href="https://jachen99.github.io/blog/product-3#4-%E6%80%BB%E4%BD%93%E5%BB%BA%E8%AE%BE%E6%96%B9%E6%A1%88" class="hash-link" aria-label="4. 总体建设方案的直接链接" title="4. 总体建设方案的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="基础数据内因外因分析">基础数据（内因、外因分析）<a href="https://jachen99.github.io/blog/product-3#%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E5%86%85%E5%9B%A0%E5%A4%96%E5%9B%A0%E5%88%86%E6%9E%90" class="hash-link" aria-label="基础数据（内因、外因分析）的直接链接" title="基础数据��（内因、外因分析）的直接链接">​</a></h3>
<ul>
<li>行业电量</li>
<li>大用户信息</li>
<li>电厂信息</li>
<li>业扩报装信息</li>
<li>气象信息</li>
<li>经济信息</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="影响因素智能跟踪">影响因素（智能跟踪）<a href="https://jachen99.github.io/blog/product-3#%E5%BD%B1%E5%93%8D%E5%9B%A0%E7%B4%A0%E6%99%BA%E8%83%BD%E8%B7%9F%E8%B8%AA" class="hash-link" aria-label="影响因素（智能跟踪）的直接链接" title="影响因素（智能跟踪）的直接链接">​</a></h3>
<ul>
<li>跟踪气象因素</li>
<li>跟踪用户因素</li>
<li>跟踪经济因素</li>
<li>跟踪行业因素</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="分析内容">分析内容<a href="https://jachen99.github.io/blog/product-3#%E5%88%86%E6%9E%90%E5%86%85%E5%AE%B9" class="hash-link" aria-label="分析内容的直接链接" title="分析内容的直接链接">​</a></h3>
<ul>
<li>基于气象经济</li>
<li>基于相似用户</li>
<li>基于业扩容量</li>
<li>基于主导行业</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="协调单位协调预测">协调单位（协调预测）<a href="https://jachen99.github.io/blog/product-3#%E5%8D%8F%E8%B0%83%E5%8D%95%E4%BD%8D%E5%8D%8F%E8%B0%83%E9%A2%84%E6%B5%8B" class="hash-link" aria-label="协调单位（协调预测）的直接链接" title="协调单位（协调预测）的直接链接">​</a></h3>
<ul>
<li>省地协调</li>
<li>部门协调</li>
<li>时间协调</li>
<li>口径协调</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="预警预警体系">预警（预警体系）<a href="https://jachen99.github.io/blog/product-3#%E9%A2%84%E8%AD%A6%E9%A2%84%E8%AD%A6%E4%BD%93%E7%B3%BB" class="hash-link" aria-label="预警（预警体系）的直接链接" title="预警（预警体系）的直接链接">​</a></h3>
<ul>
<li>预警指标筛选</li>
<li>预警体系建立</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="全覆盖全时域电量跟踪分析预警系统平台建设">全覆盖全时域电量跟踪分析预警系统平台建设<a href="https://jachen99.github.io/blog/product-3#%E5%85%A8%E8%A6%86%E7%9B%96%E5%85%A8%E6%97%B6%E5%9F%9F%E7%94%B5%E9%87%8F%E8%B7%9F%E8%B8%AA%E5%88%86%E6%9E%90%E9%A2%84%E8%AD%A6%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0%E5%BB%BA%E8%AE%BE" class="hash-link" aria-label="全覆盖全时域电量跟踪分析预警系统平台建设的直接链接" title="全覆盖全时域电量跟�踪分析预警系统平台建设的直接链接">​</a></h3>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="数据处理功能">数据处理功能<a href="https://jachen99.github.io/blog/product-3#%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%8A%9F%E8%83%BD" class="hash-link" aria-label="数据处理功能的直接链接" title="数据处理功能的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="数据处理">数据处理<a href="https://jachen99.github.io/blog/product-3#%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86" class="hash-link" aria-label="数据处理的直接链接" title="数据处理的直接链接">​</a></h3>
<ul>
<li>提供海量异常数据辨识与修正</li>
<li>基于 BI 的可视化数据分析<!-- -->
<ul>
<li>精细化的跟踪分析与数据钻取</li>
<li>量化气象影响与分析</li>
<li>量化经济影响</li>
<li>业扩用电特性研究与提炼</li>
<li>智能化负荷预测算法</li>
</ul>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="智能负荷预测方法库管理">智能负荷预测方法库管理<a href="https://jachen99.github.io/blog/product-3#%E6%99%BA%E8%83%BD%E8%B4%9F%E8%8D%B7%E9%A2%84%E6%B5%8B%E6%96%B9%E6%B3%95%E5%BA%93%E7%AE%A1%E7%90%86" class="hash-link" aria-label="智能负荷预测方法库管理的直接链接" title="智能负荷预测方法库管理的直接链接">​</a></h3>
<ul>
<li>集中预测：支持一键预测</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="多时空尺度的预测结果协调">多时空尺度的预测结果协调<a href="https://jachen99.github.io/blog/product-3#%E5%A4%9A%E6%97%B6%E7%A9%BA%E5%B0%BA%E5%BA%A6%E7%9A%84%E9%A2%84%E6%B5%8B%E7%BB%93%E6%9E%9C%E5%8D%8F%E8%B0%83" class="hash-link" aria-label="多时空尺度的预测结果协调的直接链接" title="多时空尺度的预测结果协调的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="时间尺度">时间尺度<a href="https://jachen99.github.io/blog/product-3#%E6%97%B6%E9%97%B4%E5%B0%BA%E5%BA%A6" class="hash-link" aria-label="时间尺度的直接链接" title="时间尺度的直接链接">​</a></h3>
<ul>
<li>年、月、周、日</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="空间尺度">空间尺度<a href="https://jachen99.github.io/blog/product-3#%E7%A9%BA%E9%97%B4%E5%B0%BA%E5%BA%A6" class="hash-link" aria-label="空间尺度的直接链接" title="空间尺度的直接链接">​</a></h3>
<ul>
<li>全省、地市</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="口径">口径<a href="https://jachen99.github.io/blog/product-3#%E5%8F%A3%E5%BE%84" class="hash-link" aria-label="口径的直接链接" title="口径的直接链接">​</a></h3>
<ul>
<li>用电量、售电量、供电量</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="完善的预警体系">完善的预警体系<a href="https://jachen99.github.io/blog/product-3#%E5%AE%8C%E5%96%84%E7%9A%84%E9%A2%84%E8%AD%A6%E4%BD%93%E7%B3%BB" class="hash-link" aria-label="完善的预警体系的直接链接" title="完善的预警体系的直接链接">​</a></h2>
<ul>
<li>基于内因、外因、跟踪和预测的预警分析</li>
<li>提供计划完成率预警、逆势发展预警、先行指标预警、趋势预警等</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="实用化的报表">实用化的报表<a href="https://jachen99.github.io/blog/product-3#%E5%AE%9E%E7%94%A8%E5%8C%96%E7%9A%84%E6%8A%A5%E8%A1%A8" class="hash-link" aria-label="实用化的报表的直接链接" title="实用化的报表的直接链接">​</a></h2>
<ul>
<li>支持高效、精准的报告生成，助力业务决策</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="微服务技术架构">微服务技术架构<a href="https://jachen99.github.io/blog/product-3#%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84" class="hash-link" aria-label="微服务技术架构的直接链接" title="微服务技术架构的直接链接">​</a></h2>
<ul>
<li>提供稳定、可扩展的微服务架构，确保系统的灵活性和扩展性</li>
</ul>
<hr>]]></content>
        <author>
            <name>季冠臣</name>
            <uri>https://github.com/jachen99</uri>
        </author>
        <category label="电力行业" term="电力行业"/>
        <category label="预测" term="预测"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[欢迎来到我的博客]]></title>
        <id>https://jachen99.github.io/blog/welcome</id>
        <link href="https://jachen99.github.io/blog/welcome"/>
        <updated>2021-08-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[我的博客使用了 Docusaurus 博客功能，由 博客插件 提供支持。]]></summary>
        <content type="html"><![CDATA[<p>我的博客使用了 <a href="https://docusaurus.io/docs/blog" target="_blank" rel="noopener noreferrer">Docusaurus 博客功能</a>，由 <a href="https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog" target="_blank" rel="noopener noreferrer">博客插件</a> 提供支持。</p>
<p>这里有一些小技巧，帮助你更好地使用 Docusaurus 博客。</p>
<p>你可以简单地将 Markdown 文件（或文件夹）添加到 <code>blog</code> 目录中，就可以开始写作啦！</p>
<p>常规的博客作者信息可以添加到 <code>authors.yml</code> 文件中。</p>
<p>文章的发布日期可以从文件名中提取，比如：</p>
<ul>
<li><code>2024-11-12-welcome.md</code></li>
<li><code>2024-11-12-welcome/index.md</code></li>
</ul>
<p>将文章和相关资源放在同一文件夹中，可以方便地管理博客文章的图片资源。例如：</p>
<p><img decoding="async" loading="lazy" alt="Docusaurus 公仔" src="https://jachen99.github.io/assets/images/docusaurus-plushie-banner-a60f7593abca1e3eef26a9afa244e4fb.jpeg" width="1500" height="500" class="img_ev3q"></p>
<p>博客还支持标签功能！方便归类和筛选文章。</p>
<p><strong>如果你不需要博客</strong>：只需删除这个目录，并在 Docusaurus 配置中将 <code>blog: false</code>。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="关于我">关于我<a href="https://jachen99.github.io/blog/welcome#%E5%85%B3%E4%BA%8E%E6%88%91" class="hash-link" aria-label="关于我的直接链接" title="关于我的直接链接">​</a></h2>
<p>我是季冠臣（GitHub 用户名：jachen99），目前是一名后端开发工程师，喜欢研究新的技术，尤其是 Docusaurus 这样的静态站点生成器工具。这个博客是为了分享我的技术经验和学习笔记而创建的。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="我的博客计划">我的博客计划<a href="https://jachen99.github.io/blog/welcome#%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%AE%A1%E5%88%92" class="hash-link" aria-label="我的博客计划的直接链接" title="我的博客计划的直接链接">​</a></h2>
<p>我会分享一些 Java 开发、前端知识和个人项目的进展，希望我的经验能对你有所帮助！也欢迎大家留言交流。</p>
<hr>
<p>感谢你的关注，欢迎随时光临我的博客！</p>]]></content>
        <author>
            <name>季冠臣</name>
            <uri>https://github.com/jachen99</uri>
        </author>
        <category label="Docusaurus" term="Docusaurus"/>
        <category label="个人博客" term="个人博客"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[我的第一篇 MDX 博客文章]]></title>
        <id>https://jachen99.github.io/blog/my-first-blog-post</id>
        <link href="https://jachen99.github.io/blog/my-first-blog-post"/>
        <updated>2021-08-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[这篇文章展示了 Docusaurus Markdown 功能 的一些特点，比如 MDX 的支持。]]></summary>
        <content type="html"><![CDATA[<p>这篇文章展示了 <a href="https://docusaurus.io/docs/markdown-features" target="_blank" rel="noopener noreferrer">Docusaurus Markdown 功能</a> 的一些特点，比如 <a href="https://mdxjs.com/" target="_blank" rel="noopener noreferrer">MDX</a> 的支持。</p>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>提示</div><div class="admonitionContent_BuS1"><p>借助 React 的力量，你可以在博客文章中创建交互式的组件和内容。</p></div></div>
<!-- -->
<p>例如，这里用 JSX 创建了一个交互式按钮：</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">button onClick</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">alert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'按钮被点击了！'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">点我一下！</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">button</span><span class="token operator" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>季冠臣</name>
            <uri>https://github.com/jachen99</uri>
        </author>
        <category label="Docusaurus" term="Docusaurus"/>
        <category label="个人博客" term="个人博客"/>
    </entry>
</feed>
<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jachen99.github.io/ja/blog</id>
    <title>软件一班季同学的世界 Blog</title>
    <updated>2024-07-09T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jachen99.github.io/ja/blog"/>
    <subtitle>软件一班季同学的世界 Blog</subtitle>
    <icon>https://jachen99.github.io/ja/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[EasyExcel中的数据第一行获取问题及解决方案详解]]></title>
        <id>https://jachen99.github.io/ja/blog/advanced-data-processing-with-easyexcel</id>
        <link href="https://jachen99.github.io/ja/blog/advanced-data-processing-with-easyexcel"/>
        <updated>2024-07-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[EasyExcel中的数据第一行获取问题及解决方案详解]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="easyexcel中的数据第一行获取问题及解决方案详解">EasyExcel中的数据第一行获取问题及解决方案详解<a href="https://jachen99.github.io/ja/blog/advanced-data-processing-with-easyexcel#easyexcel%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%AC%AC%E4%B8%80%E8%A1%8C%E8%8E%B7%E5%8F%96%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E8%AF%A6%E8%A7%A3" class="hash-link" aria-label="EasyExcel中的数据第一行获取问题及解决方案详解 への直接リンク" title="EasyExcel中的数据第一行获取问题及解决方案详解 への直接リンク">​</a></h2>
<p>在Java开发中，处理Excel文件是一个常见的需求。EasyExcel作为一个流行的Excel操作库，提供了方便而高效的API来读写Excel文件。然而，有时会遇到数据第一行被误读为表头的问题，特别是在Excel文件的第一行不是标准表头而是实际数据时，这一问题显得尤为突出。本文将详细讨论这一问题的根本原因，并提供一种有效的解决方案。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-easyexcel简介">1. EasyExcel简介<a href="https://jachen99.github.io/ja/blog/advanced-data-processing-with-easyexcel#1-easyexcel%E7%AE%80%E4%BB%8B" class="hash-link" aria-label="1. EasyExcel简介 への直接リンク" title="1. EasyExcel简介 への直接リンク">​</a></h3>
<p>EasyExcel是阿里巴巴开源的一款Java操作Excel的工具库，它提供了强大的功能，支持大数据量的读写操作，并且提供了丰富的样式和格式处理功能，适用于各种场景下的Excel文件处理需求。你可以访问 EasyExcel 的官方 GitHub 页面获取更多的资料和下载： <a href="https://github.com/alibaba/easyexcel" target="_blank" rel="noopener noreferrer">https://github.com/alibaba/easyexcel</a></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-问题描述">2. 问题描述<a href="https://jachen99.github.io/ja/blog/advanced-data-processing-with-easyexcel#2-%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0" class="hash-link" aria-label="2. 问题描述 への直接リンク" title="2. 问题描述 への直接リンク">​</a></h3>
<p>在使用EasyExcel读取Excel文件时，经常会出现第一行数据被错误地识别为表头的情况。这一问题的根本原因在于EasyExcel在某些情况下无法正确识别Excel文件中数据行和表头行的区分，特别是当Excel文件结构比较复杂或者存在特定格式时，EasyExcel的默认解析逻辑可能会出现偏差。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-解决方案详解">3. 解决方案详解<a href="https://jachen99.github.io/ja/blog/advanced-data-processing-with-easyexcel#3-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E8%AF%A6%E8%A7%A3" class="hash-link" aria-label="3. 解决方案详解 への直接リンク" title="3. 解决方案详解 への直接リンク">​</a></h3>
<p>为了解决数据第一行获取问题，我们可以采取以下步骤来调整和优化EasyExcel的读取操作，确保能够正确获取实际数据行而非表头行：</p>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="方案1手动指定数据起始行">方案1：手动指定数据起始行<a href="https://jachen99.github.io/ja/blog/advanced-data-processing-with-easyexcel#%E6%96%B9%E6%A1%881%E6%89%8B%E5%8A%A8%E6%8C%87%E5%AE%9A%E6%95%B0%E6%8D%AE%E8%B5%B7%E5%A7%8B%E8%A1%8C" class="hash-link" aria-label="方案1：手动指定数据起始行 への直接リンク" title="方案1：手动指定数据起始行 への直接リンク">​</a></h5>
<p>在读取Excel文件时，手动指定数据的起始行，而不依赖EasyExcel的自动识别。这可以通过设置<code>headRowNumber</code>来实现，明确告知EasyExcel从第几行开始读取数据。</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ExcelReaderBuilder readBuilder = EasyExcel.read(inputStream, ExcelData.class, new ExcelDataListener())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .sheet().headRowNumber(2) // 指定从第3行开始读取数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .doRead();</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>在上述代码中，通过<code>headRowNumber(2)</code>指定从第3行开始读取数据，避免将第一行误读为表头。</p>
<p><strong>数据处理逻辑中排除表头行</strong></p>
<p>在实际数据处理逻辑中，可以通过逻辑判断排除表头行，确保只处理实际的数据行。例如，在<code>invoke</code>方法中可以添加逻辑判断：</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@Override </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public void invoke(ExcelData data, AnalysisContext context) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (context.readRowHolder().getRowIndex() &gt; 0) { // 跳过表头行</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 处理实际数据逻辑</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>通过<code>context.readRowHolder().getRowIndex() &gt; 0</code>判断当前行索引大于0时才处理数据，跳过表头行的处理。</p>
<p><strong>使用后处理器进行二次处理</strong></p>
<p>EasyExcel提供了后处理器（Handler）机制，在数据读取完成后可以进行二次处理。可以在<code>doAfterAllAnalysed</code>方法中对数据进行进一步处理或过滤，确保最终数据的准确性和完整性。</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@Override </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public void doAfterAllAnalysed(AnalysisContext context) { </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 数据处理完成后的逻辑 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    processData(dataList);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>在上述代码中，可以在<code>doAfterAllAnalysed</code>方法中调用<code>processData</code>方法，对数据进行进一步的处理或者存储操作。</p>
<p><strong>示例代码</strong></p>
<p>以下是一个完整的示例代码，展示了如何使用EasyExcel读取Excel文件并处理数据，同时避免数据第一行被误读为表头的问题：</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">import com.alibaba.excel.EasyExcel;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import com.alibaba.excel.context.AnalysisContext;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import com.alibaba.excel.event.AnalysisEventListener;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import com.alibaba.excel.read.builder.ExcelReaderBuilder;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.io.FileInputStream;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.io.IOException;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.io.InputStream;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.util.ArrayList;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.util.List;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class ExcelReaderExample {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String fileName = "path/to/your/excel/file.xlsx";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        InputStream inputStream = null;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        try {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            inputStream = new FileInputStream(fileName);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ExcelReaderBuilder readBuilder = EasyExcel.read(inputStream, ExcelData.class, new ExcelDataListener());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            readBuilder.sheet().headRowNumber(2); // 指定从第3行开始读取数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            readBuilder.doRead();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } catch (IOException e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            e.printStackTrace();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } finally {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (inputStream != null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                try {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    inputStream.close();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                } catch (IOException e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    e.printStackTrace();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static class ExcelDataListener extends AnalysisEventListener&lt;ExcelData&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private List&lt;ExcelData&gt; dataList = new ArrayList&lt;&gt;();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public void invoke(ExcelData data, AnalysisContext context) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (context.readRowHolder().getRowIndex() &gt; 0) { // 跳过表头行</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                // 处理实际数据逻辑</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                dataList.add(data);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public void doAfterAllAnalysed(AnalysisContext context) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // 数据处理完成后的逻辑</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            processData(dataList);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private void processData(List&lt;ExcelData&gt; dataList) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // 处理数据的具体逻辑</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            for (ExcelData data : dataList) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                System.out.println(data.toString());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static class ExcelData {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // Excel中的数据字段对应的Java属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private String column1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private String column2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 省略getter和setter方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="方案2第一行数据读在表头单独处理">方案2：第一行数据读在表头单独处理<a href="https://jachen99.github.io/ja/blog/advanced-data-processing-with-easyexcel#%E6%96%B9%E6%A1%882%E7%AC%AC%E4%B8%80%E8%A1%8C%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%9C%A8%E8%A1%A8%E5%A4%B4%E5%8D%95%E7%8B%AC%E5%A4%84%E7%90%86" class="hash-link" aria-label="方案2：第一行数据读在表头单独处理 への直接リンク" title="方案2：第一行数据读在表头单独处理 への直接リンク">​</a></h5>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@SneakyThrows</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public byte[] exportExcel(List&lt;String&gt; sheet1Ids, List&lt;String&gt; sheet2Ids, List&lt;String&gt; sheet3Ids, String startDate, String endDate) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    byte[] result;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 读取模版</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         InputStream inputStream = templateFileService.getTemplateInputStreamByPath(dataComparisonFileResource.getPath())) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ExcelWriter excelWriter = EasyExcel.write(outputStream)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .withTemplate(inputStream)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .autoCloseStream(true)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .registerWriteHandler(new CustomSheet1CellWriteHandler())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .build();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 写入表1 数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;LfDispatchDataComparisonGridOperationVo&gt; sheet1Data = getGridOperationData(sheet1Ids, startDate, endDate);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.writerSheet1(excelWriter, sheet1Data);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 写入表2 数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;LfDispatchDataComparisonGwEnergyVo&gt; sheet2Data = getGwEnergyData(sheet2Ids, startDate, endDate);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.writerSheet2(excelWriter, sheet2Data);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 写入表3 数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;LfDispatchDataComparisonNewEnergyOperationVo&gt; sheet3Data = getNewEnergyOperationData(sheet3Ids, startDate, endDate);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.writerSheet3(excelWriter, sheet3Data);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 生成excel</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        excelWriter.finish();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 确保所有内容都写入输出流中</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        result = outputStream.toByteArray();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return result;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * 自定义sheet1的cell样式 用于标记 负荷占比、电量占比 大于1的单元格</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public static class CustomSheet1CellWriteHandler implements WorkbookWriteHandler, CellWriteHandler {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * 处理第一行数据 (easyExcel工具的bug 会将第一行数据读在表头)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     *</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * @param context 上下文</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void afterCellDispose(CellWriteHandlerContext context) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (context.getRowIndex() == 2 &amp;&amp; (context.getColumnIndex() == 14 || context.getColumnIndex() == 15)) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // 处理第第一个sheet</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Sheet sheet = context.getRow().getSheet().getWorkbook().getSheetAt(0);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Row row = sheet.getRow(2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Cell cell14 = row.getCell(14);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Cell cell15 = row.getCell(15);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // 应用红色样式</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            applyRedStyleToCells(cell14, cell15);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * 处理除了第一行以外的其他数据行</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     *</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * @param context 上下文</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void afterWorkbookDispose(WorkbookWriteHandlerContext context) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Workbook workbook = context.getWriteWorkbookHolder().getWorkbook();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 只处理 sheet1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Sheet sheet = workbook.getSheetAt(0);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        applyRedStyleToSheet(sheet);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * 按列标记红色</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     *</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * @param sheet 工作表</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private void applyRedStyleToSheet(Sheet sheet) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for (Row row : sheet) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            applyRedStyleToCells(row.getCell(14), row.getCell(15));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * 对指定的单元格应用红色字体样式</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     *</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * @param cells 需要应用</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">红色样式的单元格</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private void applyRedStyleToCells(Cell... cells) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for (Cell cell : cells) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (cell != null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Workbook workbook = cell.getSheet().getWorkbook();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                CellStyle redStyle = workbook.createCellStyle();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Font redFont = workbook.createFont();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                redFont.setColor(IndexedColors.RED.getIndex());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                redStyle.setFont(redFont);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                cell.setCellStyle(redStyle);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="5-结论">5. 结论<a href="https://jachen99.github.io/ja/blog/advanced-data-processing-with-easyexcel#5-%E7%BB%93%E8%AE%BA" class="hash-link" aria-label="5. 结论 への直接リンク" title="5. 结论 への直接リンク">​</a></h3>
<p>我总结：建议不再使用EasyExcel工具。</p>
<hr>]]></content>
        <author>
            <name>季冠臣</name>
            <uri>https://github.com/jachen99</uri>
        </author>
        <category label="EasyExcel" term="EasyExcel"/>
        <category label="数据处理" term="数据处理"/>
        <category label="我的Bug" term="我的Bug"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[售电市场智能分析预测系统]]></title>
        <id>https://jachen99.github.io/ja/blog/product-5</id>
        <link href="https://jachen99.github.io/ja/blog/product-5"/>
        <updated>2023-10-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[该系统针对售电市场智能分析需求，支持行业分类和售电数据分析。]]></summary>
        <content type="html"><![CDATA[<p>该系统针对售电市场智能分析需求，支持行业分类和售电数据分析。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-行业分类">1. 行业分类<a href="https://jachen99.github.io/ja/blog/product-5#1-%E8%A1%8C%E4%B8%9A%E5%88%86%E7%B1%BB" class="hash-link" aria-label="1. 行业分类 への直接リンク" title="1. 行业分类 への直接リンク">​</a></h2>
<ul>
<li>三产+居民</li>
<li>十二大+居民</li>
<li>133行业</li>
<li>631行业<!-- -->
<ul>
<li>用户角度：高耗能、重点支柱行业、细分行业（133）</li>
</ul>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-数据来源">2. 数据来源<a href="https://jachen99.github.io/ja/blog/product-5#2-%E6%95%B0%E6%8D%AE%E6%9D%A5%E6%BA%90" class="hash-link" aria-label="2. 数据来源 への直接リンク" title="2. 数据来源 への直接リンク">​</a></h2>
<ul>
<li>营销1.0、营销2.0 数据</li>
<li>新增：大一报表</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-用户来源">3. 用户来源<a href="https://jachen99.github.io/ja/blog/product-5#3-%E7%94%A8%E6%88%B7%E6%9D%A5%E6%BA%90" class="hash-link" aria-label="3. 用户来源 への直接リンク" title="3. 用户来源 への直接リンク">​</a></h2>
<ul>
<li>高压用户、低压台区用户（工业园区、学校）</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-售电类别">4. 售电类别<a href="https://jachen99.github.io/ja/blog/product-5#4-%E5%94%AE%E7%94%B5%E7%B1%BB%E5%88%AB" class="hash-link" aria-label="4. 售电类别 への直接リンク" title="4. 售电类别 への直接リンク">​</a></h2>
<ul>
<li>全集售电价格类别信息表 <code>lf_ctrl_price</code></li>
<li>售电价格类别信息表 <code>lf_fc_sell_type</code></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-口径统计数据来源方式">5. 口径（统计数据来源方式）<a href="https://jachen99.github.io/ja/blog/product-5#5-%E5%8F%A3%E5%BE%84%E7%BB%9F%E8%AE%A1%E6%95%B0%E6%8D%AE%E6%9D%A5%E6%BA%90%E6%96%B9%E5%BC%8F" class="hash-link" aria-label="5. 口径（统计数据来源方式） への直接リンク" title="5. 口径（统计数据来源方式） への直接リンク">​</a></h2>
<ul>
<li>购售同期后口径 00</li>
<li>购售同期前口径</li>
<li>发展部</li>
<li>大一报表</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="6-气象数据">6. 气象数据<a href="https://jachen99.github.io/ja/blog/product-5#6-%E6%B0%94%E8%B1%A1%E6%95%B0%E6%8D%AE" class="hash-link" aria-label="6. 气象数据 への直接リンク" title="6. 气象数据 への直接リンク">​</a></h2>
<ul>
<li>来源：气象网，用于分析和预测</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="7-调度">7. 调度<a href="https://jachen99.github.io/ja/blog/product-5#7-%E8%B0%83%E5%BA%A6" class="hash-link" aria-label="7. 调度 への直接リンク" title="7. 调度 への直接リンク">​</a></h2>
<ul>
<li>支持用电量预测和发电量调度，满足用电和负荷预测需求</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="8-电量和负荷">8. 电量和负荷<a href="https://jachen99.github.io/ja/blog/product-5#8-%E7%94%B5%E9%87%8F%E5%92%8C%E8%B4%9F%E8%8D%B7" class="hash-link" aria-label="8. 电量和负荷 への直接リンク" title="8. 电量和负荷 への直接リンク">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="负荷">负荷<a href="https://jachen99.github.io/ja/blog/product-5#%E8%B4%9F%E8%8D%B7" class="hash-link" aria-label="负荷 への直接リンク" title="负荷 への直接リンク">​</a></h3>
<ul>
<li>瞬时值</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="电量">电量<a href="https://jachen99.github.io/ja/blog/product-5#%E7%94%B5%E9%87%8F" class="hash-link" aria-label="电量 への直接リンク" title="电量 への直接リンク">​</a></h3>
<ul>
<li>累加值</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="计算指标">计算指标<a href="https://jachen99.github.io/ja/blog/product-5#%E8%AE%A1%E7%AE%97%E6%8C%87%E6%A0%87" class="hash-link" aria-label="计算指标 への直接リンク" title="计算指标 への直接リンク">​</a></h3>
<ul>
<li>负荷率：平均负荷/最高负荷</li>
<li>峰谷差：最高负荷-最低负荷</li>
<li>峰谷差率：峰谷差/最高负荷</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="9-外部经济数据">9. 外部经济数据<a href="https://jachen99.github.io/ja/blog/product-5#9-%E5%A4%96%E9%83%A8%E7%BB%8F%E6%B5%8E%E6%95%B0%E6%8D%AE" class="hash-link" aria-label="9. 外部经济数据 への直接リンク" title="9. 外部经济数据 への直接リンク">​</a></h2>
<ul>
<li>通过接入外部数据，支持多维度的数据分析和预测</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="10-电量分析周期">10. 电量分析周期<a href="https://jachen99.github.io/ja/blog/product-5#10-%E7%94%B5%E9%87%8F%E5%88%86%E6%9E%90%E5%91%A8%E6%9C%9F" class="hash-link" aria-label="10. 电量分析周期 への直接リンク" title="10. 电量分析周期 への直接リンク">​</a></h2>
<ul>
<li>支持日、周、月、季、年等多周期的电量预测和分析</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="11-业扩类型">11. 业扩类型<a href="https://jachen99.github.io/ja/blog/product-5#11-%E4%B8%9A%E6%89%A9%E7%B1%BB%E5%9E%8B" class="hash-link" aria-label="11. 业扩类型 への直接リンク" title="11. 业扩类型 への直接リンク">​</a></h2>
<ul>
<li>新增、增容、减容、暂停、销户、减容恢复、暂停恢复等</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="12-代理工商业">12. 代理工商业<a href="https://jachen99.github.io/ja/blog/product-5#12-%E4%BB%A3%E7%90%86%E5%B7%A5%E5%95%86%E4%B8%9A" class="hash-link" aria-label="12. 代理工商业 への直接リンク" title="12. 代理工商业 への直接リンク">​</a></h2>
<ul>
<li>支持代理业务数据的分析与预测</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="13-用户群体">13. 用户群体<a href="https://jachen99.github.io/ja/blog/product-5#13-%E7%94%A8%E6%88%B7%E7%BE%A4%E4%BD%93" class="hash-link" aria-label="13. 用户群体 への直接リンク" title="13. 用户群体 への直接リンク">​</a></h2>
<ul>
<li>提供行业和区域用户的细分数据，便于分析和预测</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="14-区域调度">14. 区域调度<a href="https://jachen99.github.io/ja/blog/product-5#14-%E5%8C%BA%E5%9F%9F%E8%B0%83%E5%BA%A6" class="hash-link" aria-label="14. 区域调度 への直接リンク" title="14. 区域调度 への直接リンク">​</a></h2>
<ul>
<li>通过区域调度和负荷预测优化用电量管理</li>
</ul>
<hr>
<p>通过这些功能模块，本系统能够在售电市场中提供精细化分析与预测，满足多维度的数据应用需求。</p>]]></content>
        <author>
            <name>季冠臣</name>
            <uri>https://github.com/jachen99</uri>
        </author>
        <category label="电力行业" term="电力行业"/>
        <category label="预测" term="预测"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[海量用户用电需求分析预测系统]]></title>
        <id>https://jachen99.github.io/ja/blog/product-3</id>
        <link href="https://jachen99.github.io/ja/blog/product-3"/>
        <updated>2023-04-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[该系统旨在分析和预测海量用户的用电需求，支持多维度的市场跟踪、电量预警和报表生成。]]></summary>
        <content type="html"><![CDATA[<p>该系统旨在分析和预测海量用户的用电需求，支持多维度的市场跟踪、电量预警和报表生成。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-背景意义">1. 背景意义<a href="https://jachen99.github.io/ja/blog/product-3#1-%E8%83%8C%E6%99%AF%E6%84%8F%E4%B9%89" class="hash-link" aria-label="1. 背景意义 への直接リンク" title="1. 背景意义 への直接リンク">​</a></h2>
<p>通过该系统，可以全面分析用户的用电需求，提升供电部门的服务效率和精准度。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-理论研究目标">2. 理论研究目标<a href="https://jachen99.github.io/ja/blog/product-3#2-%E7%90%86%E8%AE%BA%E7%A0%94%E7%A9%B6%E7%9B%AE%E6%A0%87" class="hash-link" aria-label="2. 理论研究目标 への直接リンク" title="2. 理论研究目标 への直接リンク">​</a></h2>
<p>研究并建立科学、准确的用户用电需求分析模型，满足不同行业和用户的预测需求。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-总体建设目标">3. 总体建设目标<a href="https://jachen99.github.io/ja/blog/product-3#3-%E6%80%BB%E4%BD%93%E5%BB%BA%E8%AE%BE%E7%9B%AE%E6%A0%87" class="hash-link" aria-label="3. 总体建设目标 への直接リンク" title="3. 总体建设目标 への直接リンク">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="数据中心">数据中心<a href="https://jachen99.github.io/ja/blog/product-3#%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83" class="hash-link" aria-label="数据中心 への直接リンク" title="数据中心 への直接リンク">​</a></h3>
<ul>
<li>市场跟踪与分析</li>
<li>电量及负荷预测</li>
<li>电量预警</li>
<li>报表报告</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-总体建设方案">4. 总体建设方案<a href="https://jachen99.github.io/ja/blog/product-3#4-%E6%80%BB%E4%BD%93%E5%BB%BA%E8%AE%BE%E6%96%B9%E6%A1%88" class="hash-link" aria-label="4. 总体建设方案 への直接リンク" title="4. 总体建设方案 への直接リンク">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="基础数据内因外因分析">基础数据（内因、外因分析）<a href="https://jachen99.github.io/ja/blog/product-3#%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E5%86%85%E5%9B%A0%E5%A4%96%E5%9B%A0%E5%88%86%E6%9E%90" class="hash-link" aria-label="基础�数据（内因、外因分析） への直接リンク" title="基础数据（内因、外因分析） への直接リンク">​</a></h3>
<ul>
<li>行业电量</li>
<li>大用户信息</li>
<li>电厂信息</li>
<li>业扩报装信息</li>
<li>气象信息</li>
<li>经济信息</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="影响因素智能跟踪">影响因素（智能跟踪）<a href="https://jachen99.github.io/ja/blog/product-3#%E5%BD%B1%E5%93%8D%E5%9B%A0%E7%B4%A0%E6%99%BA%E8%83%BD%E8%B7%9F%E8%B8%AA" class="hash-link" aria-label="影响因素（智能跟踪） への直接リンク" title="影响因素（智能跟踪） への直接リンク">​</a></h3>
<ul>
<li>跟踪气象因素</li>
<li>跟踪用户因素</li>
<li>跟踪经济因素</li>
<li>跟踪行业因素</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="分析内容">分析内容<a href="https://jachen99.github.io/ja/blog/product-3#%E5%88%86%E6%9E%90%E5%86%85%E5%AE%B9" class="hash-link" aria-label="分析内容 への直接リンク" title="分析内容 への直接リンク">​</a></h3>
<ul>
<li>基于气象经济</li>
<li>基于相似用户</li>
<li>基于业扩容量</li>
<li>基于主导行业</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="协调单位协调预测">协调单位（协调预测）<a href="https://jachen99.github.io/ja/blog/product-3#%E5%8D%8F%E8%B0%83%E5%8D%95%E4%BD%8D%E5%8D%8F%E8%B0%83%E9%A2%84%E6%B5%8B" class="hash-link" aria-label="协调单位（协调预测） への直接リンク" title="协调单位（协调预测） への直接リンク">​</a></h3>
<ul>
<li>省地协调</li>
<li>部门协调</li>
<li>时间协调</li>
<li>口径协调</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="预警预警体系">预警（预警体系）<a href="https://jachen99.github.io/ja/blog/product-3#%E9%A2%84%E8%AD%A6%E9%A2%84%E8%AD%A6%E4%BD%93%E7%B3%BB" class="hash-link" aria-label="预警（预警体系） への直接リンク" title="预警（预警体系） への直接リンク">​</a></h3>
<ul>
<li>预警指标筛选</li>
<li>预警体系建立</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="全覆盖全时域电量跟踪分析预警系统平台建设">全覆盖全时域电量跟踪分析预警系统平台建设<a href="https://jachen99.github.io/ja/blog/product-3#%E5%85%A8%E8%A6%86%E7%9B%96%E5%85%A8%E6%97%B6%E5%9F%9F%E7%94%B5%E9%87%8F%E8%B7%9F%E8%B8%AA%E5%88%86%E6%9E%90%E9%A2%84%E8%AD%A6%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0%E5%BB%BA%E8%AE%BE" class="hash-link" aria-label="全覆盖全时域电量跟踪分析预警系统平台建设 への直接リンク" title="全覆盖全时域电量跟踪分析预警系统平台建设 への直接リンク">​</a></h3>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="数据处理功能">数据处理功能<a href="https://jachen99.github.io/ja/blog/product-3#%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%8A%9F%E8%83%BD" class="hash-link" aria-label="数据处理功能 への直接リンク" title="数据处理功能 への直接リンク">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="数据处理">数据处理<a href="https://jachen99.github.io/ja/blog/product-3#%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86" class="hash-link" aria-label="数据处理 への直接リンク" title="数据处理 への直接リンク">​</a></h3>
<ul>
<li>提供海量异常数据辨识与修正</li>
<li>基于 BI 的可视化数据分析<!-- -->
<ul>
<li>精细化的跟踪分析与数据钻取</li>
<li>量化气象影响与分析</li>
<li>量化经济影响</li>
<li>业扩用电特性研究与提炼</li>
<li>智能化负荷预测算法</li>
</ul>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="智能负荷预测方法库管理">智能负荷预测方法库管理<a href="https://jachen99.github.io/ja/blog/product-3#%E6%99%BA%E8%83%BD%E8%B4%9F%E8%8D%B7%E9%A2%84%E6%B5%8B%E6%96%B9%E6%B3%95%E5%BA%93%E7%AE%A1%E7%90%86" class="hash-link" aria-label="智能负荷预测方法库管理 への直接リンク" title="智能负荷预测方法库管理 への直接リンク">​</a></h3>
<ul>
<li>集中预测：支持一键预测</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="多时空尺度的预测结果协调">多时空尺度的预测结果协调<a href="https://jachen99.github.io/ja/blog/product-3#%E5%A4%9A%E6%97%B6%E7%A9%BA%E5%B0%BA%E5%BA%A6%E7%9A%84%E9%A2%84%E6%B5%8B%E7%BB%93%E6%9E%9C%E5%8D%8F%E8%B0%83" class="hash-link" aria-label="多时空尺度的预测结果协调 への直接リンク" title="多时空尺度的预测结果协调 への直接リンク">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="时间尺度">时间尺度<a href="https://jachen99.github.io/ja/blog/product-3#%E6%97%B6%E9%97%B4%E5%B0%BA%E5%BA%A6" class="hash-link" aria-label="时间尺度 への直接リンク" title="时间尺度 への直接リンク">​</a></h3>
<ul>
<li>年、月、周、日</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="空间尺度">空间尺度<a href="https://jachen99.github.io/ja/blog/product-3#%E7%A9%BA%E9%97%B4%E5%B0%BA%E5%BA%A6" class="hash-link" aria-label="空间尺度 への直接リンク" title="空间尺度 への直接リンク">​</a></h3>
<ul>
<li>全省、地市</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="口径">口径<a href="https://jachen99.github.io/ja/blog/product-3#%E5%8F%A3%E5%BE%84" class="hash-link" aria-label="口径 への直接リンク" title="口径 への直接リンク">​</a></h3>
<ul>
<li>用电量、售电量、供电量</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="完善的预警体系">完善的预警体系<a href="https://jachen99.github.io/ja/blog/product-3#%E5%AE%8C%E5%96%84%E7%9A%84%E9%A2%84%E8%AD%A6%E4%BD%93%E7%B3%BB" class="hash-link" aria-label="完善的预警体系 への直接リンク" title="完善的预警体系 への直接リンク">​</a></h2>
<ul>
<li>基于内因、外因、跟踪和预测的预警分析</li>
<li>提供计划完成率预警、逆势发展预警、先行指标预警、趋势预警等</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="实用化的报表">实用化的报表<a href="https://jachen99.github.io/ja/blog/product-3#%E5%AE%9E%E7%94%A8%E5%8C%96%E7%9A%84%E6%8A%A5%E8%A1%A8" class="hash-link" aria-label="实用化的报表 への直接リンク" title="实用化的报表 への直接リンク">​</a></h2>
<ul>
<li>支持高效、精准的报告生成，助力业务决策</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="微服务技术架构">微服务技术架构<a href="https://jachen99.github.io/ja/blog/product-3#%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84" class="hash-link" aria-label="微服务技术架构 への直接リンク" title="微服务技术架构 への直接リンク">​</a></h2>
<ul>
<li>提供稳定、可扩展的微服务架构，确保系统的灵活性和扩展性</li>
</ul>
<hr>]]></content>
        <author>
            <name>季冠臣</name>
            <uri>https://github.com/jachen99</uri>
        </author>
        <category label="电力行业" term="电力行业"/>
        <category label="预测" term="预测"/>
    </entry>
</feed>